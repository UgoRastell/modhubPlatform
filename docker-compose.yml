version: "3.8"

services:

  mongodb:
    image: mongo:6
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - ./docker/data/mongo_clean:/data/db
    command: ["--bind_ip", "0.0.0.0", "--wiredTigerCacheSizeGB", "1"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  gateway:
    build:
      context: ./src/Gateway
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5000
    depends_on:
      - mongodb
      - rabbitmq
      - logstash
    ports:
      - "8080:8080"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  usersservice:
    build:
      context: ./src/Services/Users
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5001
      - MongoDbSettings__ConnectionString=mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@mongodb:27017/${MONGO_DATABASE}?authSource=admin&authMechanism=SCRAM-SHA-256
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=admin
      - RabbitMQ__Password=admin
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5000
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    depends_on:
      - mongodb
      - rabbitmq
      - logstash
    ports:
      - "5001:5001"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  modsservice:
    build:
      context: ./src/Services/Mods
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5002
      - MongoDbSettings__ConnectionString=mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@mongodb:27017/${MONGO_DATABASE}?authSource=admin&authMechanism=SCRAM-SHA-256
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=admin
      - RabbitMQ__Password=admin
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5000
    volumes:
      # CORRECTION: Bind-mount absolu pour forcer la synchronisation
      - type: bind
        source: ./docker/data/uploads
        target: /app/uploads
    depends_on:
      - mongodb
      - rabbitmq
      - logstash
    ports:
      - "5002:5002"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  paymentsservice:
    build:
      context: ./src/Services/Payments
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5003
      - MongoDbSettings__ConnectionString=mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@mongodb:27017/${MONGO_DATABASE}?authSource=admin&authMechanism=SCRAM-SHA-256
      - Stripe__ApiKey=sk_test_xxx 
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5000
    depends_on:
      - mongodb
      - logstash
    ports:
      - "5003:5003"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  communityservice:
    build:
      context: ./src/Services/Community
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5004
      - MongoDbSettings__ConnectionString=mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@mongodb:27017/${MONGO_DATABASE}?authSource=admin&authMechanism=SCRAM-SHA-256
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5000
    depends_on:
      - mongodb
      - logstash
    ports:
      - "5004:5004"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    build:
      context: ./src
      dockerfile: Frontend/Dockerfile 
    restart: always
    depends_on:
      - gateway
    ports:
      - "80"
    volumes:
      # CORRECTION: Bind-mount explicite pour Frontend (cohérent avec ModsService)
      - type: bind
        source: ./docker/data/uploads
        target: /app/wwwroot/uploads
    networks:
      - default
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nginx:
    image: nginx:latest
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.dev.conf:/etc/nginx/nginx.conf:ro
      # Commenté pour le développement local
      # - ./docker/certs:/etc/nginx/certs:ro
      # - ./docker/letsencrypt:/etc/letsencrypt
    depends_on:
      - frontend
      - gateway
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - ./docker/data/elasticsearch:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-s", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  logstash:
    image: docker.elastic.co/logstash/logstash:8.9.0
    restart: always
    volumes:
      - ./docker/logstash:/usr/share/logstash/pipeline
    ports:
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-s", "http://localhost:9600/?pretty"]
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    restart: always
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-s", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    restart: always
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ./docker/data/grafana:/var/lib/grafana
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/data/prometheus:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  modsec-crs:
    image: owasp/modsecurity-crs:3.3-nginx
    # Utilisation d'une image alternative disponible
    # Si cette image ne fonctionne pas non plus, commentez tout le bloc modsec-crs
    ports:
      - "8000:80"
    environment:
      - PARANOIA=1
      - ANOMALY_INBOUND=5
      - ANOMALY_OUTBOUND=4
    volumes:
      - ./docker/modsecurity:/etc/apache2/modsecurity.d
    depends_on:
      - nginx
    restart: always

networks:
  default:
    driver: bridge