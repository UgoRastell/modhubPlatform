name: CI/CD Pipeline

on:
  push:
    branches:
      - master
      - dev
  pull_request:
    branches:
      - master
      - dev

# Définit les permissions pour le jeton GITHUB_TOKEN
permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io/ugorastell
  DOTNET_VERSION: '9.0'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: Restore dependencies
        run: dotnet restore ModsGamingPlatform.sln
        
      - name: Build solution
        run: dotnet build --configuration Release --no-restore ModsGamingPlatform.sln
        
      - name: Run tests
        run: dotnet test --no-build --configuration Release --verbosity normal ModsGamingPlatform.sln


  build-and-push:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push Gateway
        uses: docker/build-push-action@v5
        with:
          context: ./src/Gateway
          push: true
          tags: ${{ env.REGISTRY }}/gateway:latest,${{ env.REGISTRY }}/gateway:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/gateway:cache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/gateway:cache,mode=max

      - name: Build & Push UsersService
        uses: docker/build-push-action@v5
        with:
          context: ./src/Services/Users
          push: true
          tags: ${{ env.REGISTRY }}/usersservice:latest,${{ env.REGISTRY }}/usersservice:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/usersservice:cache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/usersservice:cache,mode=max

      - name: Build & Push ModsService
        uses: docker/build-push-action@v5
        with:
          context: ./src/Services/Mods
          push: true
          tags: ${{ env.REGISTRY }}/modsservice:latest,${{ env.REGISTRY }}/modsservice:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/modsservice:cache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/modsservice:cache,mode=max
          
      - name: Build & Push PaymentsService
        uses: docker/build-push-action@v5
        with:
          context: ./src/Services/Payments
          push: true
          tags: ${{ env.REGISTRY }}/paymentsservice:latest,${{ env.REGISTRY }}/paymentsservice:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/paymentsservice:cache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/paymentsservice:cache,mode=max
          
      - name: Build & Push CommunityService
        uses: docker/build-push-action@v5
        with:
          context: ./src/Services/Community
          push: true
          tags: ${{ env.REGISTRY }}/communityservice:latest,${{ env.REGISTRY }}/communityservice:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/communityservice:cache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/communityservice:cache,mode=max

      - name: Build & Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./src
          file: ./src/Frontend/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/frontend:latest,${{ env.REGISTRY }}/frontend:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/frontend:cache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/frontend:cache,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: cicd
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout repository for deployment files
        uses: actions/checkout@v4
        
      - name: Set up Docker Compose configuration
        run: |
          # Créer le fichier docker-compose.production.yml à partir du template
          envsubst < ./deployment/docker-compose.template.yml > ./deployment/docker-compose.production.yml
          # Afficher le répertoire pour débogage
          ls -la ./deployment/
          cat ./deployment/docker-compose.production.yml
        env:
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_TAG: ${{ github.sha }}
          DOMAIN: 'modhub.fr'
          
      - name: Copy deployment files to VPS
        uses: appleboy/scp-action@master
        with:
          host: vps-f63d8d2b.vps.ovh.net
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "./deployment/docker-compose.production.yml,./deployment/nginx/*,./deployment/.env"
          target: "/home/${{ secrets.VPS_USER }}/modhub"
          strip_components: 0
          overwrite: true
          debug: true

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1
        with:
          host: vps-f63d8d2b.vps.ovh.net
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          debug: true
          script: |
            cd ~/modhub
                        
            # Vérifier si Docker est installé, sinon l'installer
            if ! command -v docker &> /dev/null; then
              echo "Docker n'est pas installé. Installation en cours..."
              sudo apt-get update
              sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
              sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io
              sudo usermod -aG docker $USER
            fi
            
            # Vérifier si Docker Compose est installé, sinon l'installer
            if ! command -v docker-compose &> /dev/null; then
              echo "Docker Compose n'est pas installé. Installation en cours..."
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # Se connecter au registre GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            # Arrêter et supprimer les conteneurs existants
            docker-compose -f docker-compose.production.yml down
            # Pull des nouvelles images
            docker-compose -f docker-compose.production.yml pull
            # Démarrer les conteneurs avec la nouvelle configuration
            docker-compose -f docker-compose.production.yml up -d
            # Vérifier l'état des conteneurs
            docker-compose -f docker-compose.production.yml ps
            
      - name: Notify deployment status
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: Deployment Status
          SLACK_MESSAGE: 'ModHub deployment ${{ job.status }} :rocket:'
