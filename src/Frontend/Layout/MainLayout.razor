@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject ISnackbar Snackbar
@using Frontend.Shared

<MudThemeProvider Theme="@Theme" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

<MudLayout>
    <MudAppBar Elevation="1" Color="Color.Primary" Fixed="true" Dense="true">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudText Typo="Typo.h6">ModsGamingPlatform</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Search" Color="Color.Inherit" Edge="Edge.End" OnClick="@(() => ShowSearchDialog = true)" />
        
        <AuthorizeView>
            <Authorized>
                <MudMenu Icon="@Icons.Material.Filled.Notifications" Color="Color.Inherit" Direction="Direction.Bottom" OffsetY="true">
                    <MudMenuItem>Nouveau mod disponible</MudMenuItem>
                    <MudMenuItem>Mise à jour de votre mod</MudMenuItem>
                    <MudMenuItem>
                        <MudButton FullWidth="true" Variant="Variant.Text" Color="Color.Primary" Href="/notifications">
                            Voir toutes les notifications
                        </MudButton>
                    </MudMenuItem>
                </MudMenu>
                
                <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                    <ActivatorContent>
                        <MudAvatar Class="ml-3 my-2" Style="cursor: pointer;">
                            <MudIcon Icon="@Icons.Material.Filled.Person" />
                        </MudAvatar>
                    </ActivatorContent>
                    <ChildContent>
                        <MudText Typo="Typo.subtitle2" Class="px-4 py-2">Mon compte</MudText>
                        <MudMenuItem Href="/account/profile" Icon="@Icons.Material.Filled.Person">Mon profil</MudMenuItem>
                        <MudMenuItem Href="/account/library" Icon="@Icons.Material.Filled.LibraryBooks">Ma bibliothèque</MudMenuItem>
                        <MudMenuItem Href="/account/settings" Icon="@Icons.Material.Filled.Settings">Paramètres</MudMenuItem>
                        <MudDivider />
                        <MudMenuItem OnClick="Logout" Icon="@Icons.Material.Filled.Logout">Déconnexion</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </Authorized>
            <NotAuthorized>
                <MudButton Variant="Variant.Text" Color="Color.Inherit" Href="/login" Class="ml-3">Se connecter</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" Href="/register" Class="ml-2">S'inscrire</MudButton>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>

    <MudDrawer @bind-Open="@DrawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="py-6">
            @Body
        </MudContainer>
    </MudMainContent>
    
    <MudDialog @bind-IsVisible="ShowSearchDialog" Options="new DialogOptions { CloseOnEscapeKey = true }">
        <TitleContent>
            <MudText Typo="Typo.h6">Rechercher</MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField T="string" Label="Rechercher un mod, un jeu, ou une catégorie" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mt-3" @bind-Value="SearchText" />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="@(() => ShowSearchDialog = false)">Annuler</MudButton>
            <MudButton Color="Color.Primary" OnClick="PerformSearch">Rechercher</MudButton>
        </DialogActions>
    </MudDialog>
</MudLayout>

@code {
    private bool DrawerOpen = true;
    private bool ShowSearchDialog = false;
    private string SearchText = string.Empty;
    
    [Inject]
    public MudBlazor.MudTheme Theme { get; set; }

    private void ToggleDrawer()
    {
        DrawerOpen = !DrawerOpen;
    }

    private async Task Logout()
    {
        try
        {
            await AuthService.Logout();
            Snackbar.Add("Vous avez été déconnecté avec succès", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur: {ex.Message}", Severity.Error);
        }
        finally
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private void PerformSearch()
    {
        if (!string.IsNullOrWhiteSpace(SearchText))
        {
            NavigationManager.NavigateTo($"/search?q={Uri.EscapeDataString(SearchText)}");
            ShowSearchDialog = false;
        }
    }
}
