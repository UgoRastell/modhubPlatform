@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject ISnackbar Snackbar
@using Frontend.Shared

<MudThemeProvider Theme="@Theme" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

<MudLayout>
    @* La MudAppBar a été supprimée pour n'utiliser que le NavMenu latéral *@

    <MudDrawer @bind-Open="@DrawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="py-6">
            @Body
        </MudContainer>
    </MudMainContent>
    
    <MudDialog @bind-IsVisible="ShowSearchDialog" Options="new DialogOptions { CloseOnEscapeKey = true }">
        <TitleContent>
            <MudText Typo="Typo.h6">Rechercher</MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField T="string" Label="Rechercher un mod, un jeu, ou une catégorie" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mt-3" @bind-Value="SearchText" />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="@(() => ShowSearchDialog = false)">Annuler</MudButton>
            <MudButton Color="Color.Primary" OnClick="PerformSearch">Rechercher</MudButton>
        </DialogActions>
    </MudDialog>
</MudLayout>

@code {
    private bool DrawerOpen = true;
    private bool ShowSearchDialog = false;
    private string SearchText = string.Empty;
    
    [Inject]
    public MudBlazor.MudTheme Theme { get; set; }

    private void ToggleDrawer()
    {
        DrawerOpen = !DrawerOpen;
    }

    private async Task Logout()
    {
        try
        {
            await AuthService.Logout();
            Snackbar.Add("Vous avez été déconnecté avec succès", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur: {ex.Message}", Severity.Error);
        }
        finally
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private void PerformSearch()
    {
        if (!string.IsNullOrWhiteSpace(SearchText))
        {
            NavigationManager.NavigateTo($"/search?q={Uri.EscapeDataString(SearchText)}");
            ShowSearchDialog = false;
        }
    }
}
