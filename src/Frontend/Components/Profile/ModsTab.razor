@using Frontend.Models
@using Frontend.Models.Common
@inject HttpClient Http
@inject ISnackbar Snackbar

@if (isLoading)
{
    <MudGrid>
        @for (int i = 0; i < 8; i++)
        {
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="220px" Animation="Animation.Wave" Class="rounded-lg" />
            </MudItem>
        }
    </MudGrid>
}
else if (mods?.Items == null || !mods.Items.Any())
{
    <MudAlert Severity="Severity.Info" Class="mt-4">Aucun mod trouvé</MudAlert>
}
else
{
    <MudGrid>
        @foreach (var mod in mods.Items)
        {
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudCard Elevation="2" Class="mod-card h-100">
                    <MudCardMedia Image="@(string.IsNullOrEmpty(mod.CoverImageUrl) ? "/images/placeholder-mod.jpg" : mod.CoverImageUrl)" 
                                 Height="160" Class="mod-card-media" />
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6" Class="mud-text-ellipsis">@mod.Title</MudText>
                            <div class="d-flex align-center">
                                <MudChip T="string" Size="Size.Small" Color="Color.Dark" Style="@($"background-color: {mod.StatusColor}; margin-right: 8px;")"> 
                                    @mod.Status
                                </MudChip>
                                <div class="d-flex align-center">
                                    <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Small" Class="mr-1" />
                                    <MudText Typo="Typo.body2">@mod.FormattedRating</MudText>
                                </div>
                            </div>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent Class="pb-0">
                        <MudText Typo="Typo.body2" Class="mud-text-ellipsis mod-description">
                            @mod.Description
                        </MudText>
                        <div class="d-flex flex-wrap gap-1 mt-2">
                            @foreach (var tag in mod.Tags.Take(3))
                            {
                                <MudChip T="string" Size="Size.Small" Variant="Variant.Text" Color="Color.Primary">@tag</MudChip>
                            }
                            @if (mod.Tags.Count > 3)
                            {
                                <MudChip T="string" Size="Size.Small" Variant="Variant.Text">+@(mod.Tags.Count - 3)</MudChip>
                            }
                        </div>
                    </MudCardContent>
                    <MudCardActions Class="pt-0">
                        <MudButton Variant="Variant.Text" Color="Color.Primary" 
                                  OnClick="@(() => NavigateToMod(mod.Id))">Voir</MudButton>
                        <MudSpacer />
                        <MudTooltip Text="Téléchargements">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.CloudDownload" Size="Size.Small" Class="mr-1" />
                                <MudText Typo="Typo.body2">@mod.FormattedDownloads</MudText>
                            </div>
                        </MudTooltip>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
    
    <div class="d-flex justify-center mt-8">
        <MudPagination Count="@mods.TotalPages" Selected="@mods.PageNumber" 
                      SelectedChanged="@PageChanged" Class="pa-4" Color="Color.Primary" />
    </div>
}

<style>
    .mod-card {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        overflow: hidden;
    }
    
    .mod-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 16px rgba(0,0,0,0.2);
    }
    
    .mod-card-media {
        background-size: cover;
        background-position: center;
    }
    
    .mod-description {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        max-height: 40px;
    }
</style>

@code {
    [Parameter]
    public string? UserId { get; set; }
    
    private Frontend.Models.Common.PagedResult<ModCardDTO>? mods;
    private bool isLoading = true;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadMods();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(UserId))
        {
            await LoadMods();
        }
    }
    
    private async Task LoadMods()
    {
        isLoading = true;
        
        try
        {
            // In a real implementation, fetch mods from API
            // mods = await Http.GetFromJsonAsync<PagedResult<ModCardDTO>>($"/api/users/{UserId}/mods?page={mods?.PageNumber ?? 1}&pageSize={mods?.PageSize ?? 12}");
            
            // For now, create mock data
            await Task.Delay(500); // Simulate API call
            
            var mockMods = new List<ModCardDTO>();
            var random = new Random();
            
            for (int i = 0; i < 12; i++)
            {
                if (i > 8 && random.Next(100) < 30)
                {
                    continue; // Randomly skip some items to have less than pageSize
                }
                
                var mockMod = new ModCardDTO
                {
                    Id = $"mod-{mods?.PageNumber ?? 1}-{i}",
                    Title = $"Awesome Mod {mods?.PageNumber ?? 1}-{i+1}",
                    Description = $"This is a great mod that adds amazing features to your game. Version {random.Next(1, 5)}.{random.Next(0, 10)}",
                    CoverImageUrl = "",
                    Status = random.Next(100) < 80 ? "Published" : 
                             random.Next(100) < 50 ? "Draft" : 
                             random.Next(100) < 50 ? "Pending" : "Rejected",
                    Tags = GetRandomTags(random),
                    DownloadCount = random.Next(50, 15000),
                    Rating = Math.Round(3 + random.NextDouble() * 2, 1),
                    RatingCount = random.Next(5, 500),
                    AuthorId = UserId,
                    AuthorName = "GamerPro",
                    CreatedAt = DateTime.Now.AddDays(-random.Next(1, 365)),
                    UpdatedAt = DateTime.Now.AddDays(-random.Next(0, 30))
                };
                
                mockMods.Add(mockMod);
            }
            
            mods = new Frontend.Models.Common.PagedResult<ModCardDTO>
            {
                Items = mockMods,
                TotalCount = 24,
                PageNumber = mods?.PageNumber ?? 1,
                PageSize = 12
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur lors du chargement des mods : {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private List<string> GetRandomTags(Random random)
    {
        var allTags = new List<string> 
        { 
            "Environment", "Gameplay", "Graphics", "UI", "Combat", "Weapons", 
            "Armor", "Quests", "NPCs", "Audio", "Performance", "Bugfix" 
        };
        
        return allTags
            .OrderBy(x => random.Next())
            .Take(random.Next(1, 5))
            .ToList();
    }
    
    private async Task PageChanged(int page)
    {
        if (mods != null)
            mods.PageNumber = page;
        await LoadMods();
    }
    
    private void NavigateToMod(string modId)
    {
        // In a real implementation, navigate to the mod details page
        Snackbar.Add($"Navigation vers le mod {modId}", Severity.Normal);
    }
}
