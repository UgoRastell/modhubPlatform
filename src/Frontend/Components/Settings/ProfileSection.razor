@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using MudBlazor
@using System.Net.Http.Json
@using System.Text.Json
@using System.Net.Http.Headers
@using Frontend.Services
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject ILocalStorageService LocalStorage

<MudCard Class="settings-card mb-4">
    <EditForm Model="@profile" OnValidSubmit="SaveProfileChanges">
        <DataAnnotationsValidator />
        <MudCardHeader>
            <MudText Typo="Typo.h5">Profil</MudText>
        </MudCardHeader>
        
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" md="4" Class="d-flex justify-center align-center flex-column">
                    <MudAvatar Style="height: 96px; width: 96px; font-size: 42px;" Class="mb-3">
                        @if (string.IsNullOrEmpty(profile.AvatarUrl))
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Person" />
                        }
                        else
                        {
                            <MudImage Src="@profile.AvatarUrl" Alt="Avatar" />
                        }
                    </MudAvatar>
                    
                    <InputFile id="fileInput" OnChange="UploadAvatar" accept=".jpg,.jpeg,.png" style="display:none" />
                    <MudButton HtmlTag="label"
                              Variant="Variant.Outlined"
                              Color="Color.Primary"
                              StartIcon="@Icons.Material.Filled.CloudUpload"
                              for="fileInput">
                        Changer l'avatar
                    </MudButton>

                    <MudText Typo="Typo.caption" Class="mt-1">JPG ou PNG, max 2MB</MudText>
                </MudItem>
                
                <MudItem xs="12" md="8">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="profile.Username" 
                                         Label="Pseudo" 
                                         Variant="Variant.Outlined"
                                         Required="true"
                                         Counter="32"
                                         HelperText="Entre 3 et 32 caractères, doit être unique" />
                            <ValidationMessage For="@(() => profile.Username)" />
                        </MudItem>
                        
                        <MudItem xs="12">
                            <MudTextField @bind-Value="profile.Bio" 
                                         Label="Biographie" 
                                         Variant="Variant.Outlined"
                                         Counter="280"
                                         Placeholder="Parlez de vous en quelques mots..."
                                         Lines="3"
                                         HelperText="Markdown limité autorisé (**, _, ``, liens)" />
                            <ValidationMessage For="@(() => profile.Bio)" />
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="profile.SocialLinks.Discord" 
                                         Label="Discord" 
                                         Variant="Variant.Outlined"
                                         Adornment="Adornment.Start" 
                                         AdornmentIcon="@Icons.Material.Filled.Chat"
                                         Placeholder="Nom_utilisateur#0000" />
                        </MudItem>
                        
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="profile.SocialLinks.Youtube" 
                                         Label="YouTube" 
                                         Variant="Variant.Outlined"
                                         Adornment="Adornment.Start" 
                                         AdornmentIcon="@Icons.Material.Filled.VideoLibrary"
                                         Placeholder="votre chaîne" />
                        </MudItem>
                                                
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="profile.SocialLinks.Twitch" 
                                         Label="Twitch" 
                                         Variant="Variant.Outlined"
                                         Adornment="Adornment.Start" 
                                         AdornmentIcon="@Icons.Material.Filled.Videocam"
                                         Placeholder="votre pseudo" />
                        </MudItem>
                        
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="profile.SocialLinks.Website" 
                                         Label="Site web" 
                                         Variant="Variant.Outlined"
                                         Adornment="Adornment.Start" 
                                         AdornmentIcon="@Icons.Material.Filled.Language"
                                         Placeholder="https://..." />
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </MudCardContent>
        
        <MudCardActions Class="pb-4 px-4 d-flex justify-end">
            <MudButton ButtonType="ButtonType.Submit"
                      Variant="Variant.Filled"
                      Color="Color.Primary"
                      Size="Size.Medium"
                      Class="px-6"
                      Disabled="@isSaving">
                @if (isSaving)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Enregistrement...</MudText>
                }
                else
                {
                    <MudText>Enregistrer</MudText>
                }
            </MudButton>
        </MudCardActions>
    </EditForm>
</MudCard>

@code {
    private ProfileModel profile = new();
    private bool isSaving = false;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadProfile();
    }

    private async Task LoadProfile()
    {
        try
        {
            isLoading = true;

            // Récupérer le token d'authentification du stockage local
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            if (string.IsNullOrEmpty(token))
            {
                Snackbar.Add("Vous devez être connecté pour accéder à votre profil", Severity.Warning);
                return;
            }

            // Ajouter le token à la requête
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            // Appeler l'API pour obtenir les données du profil
            var response = await Http.GetAsync("/api/users/profile");

            if (response.IsSuccessStatusCode)
            {
                var apiProfile = await response.Content.ReadFromJsonAsync<UserProfileResponse>();
                if (apiProfile != null)
                {
                    // Mapper les données API vers notre modèle ProfileModel
                    profile = new ProfileModel
                    {
                        Username = apiProfile.Username,
                        Bio = apiProfile.Bio ?? "",
                        AvatarUrl = apiProfile.ProfilePictureUrl ?? "",
                        // Initialiser SocialLinks si nécessaire (à adapter si votre API retourne ces informations)
                        SocialLinks = new SocialLinks
                        {
                            // Ces champs pourraient être initialisés depuis l'API si disponible
                            Discord = "",
                            Youtube = "",
                            Twitch = "",
                            Website = ""
                        }
                    };
                }
            }
            else
            {
                Snackbar.Add("Erreur lors du chargement du profil", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task UploadAvatar(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            try
            {
                // Vérifier la taille du fichier (max 2MB)
                if (e.File.Size > 2 * 1024 * 1024)
                {
                    Snackbar.Add("Le fichier ne doit pas dépasser 2MB", Severity.Warning);
                    return;
                }

                // Vérifier l'extension du fichier
                var extension = Path.GetExtension(e.File.Name).ToLowerInvariant();
                if (extension != ".jpg" && extension != ".jpeg" && extension != ".png")
                {
                    Snackbar.Add("Seuls les formats JPG et PNG sont acceptés", Severity.Warning);
                    return;
                }

                // Récupérer le token d'authentification
                var token = await LocalStorage.GetItemAsync<string>("authToken");
                if (string.IsNullOrEmpty(token))
                {
                    Snackbar.Add("Vous devez être connecté pour modifier votre avatar", Severity.Warning);
                    return;
                }

                // Préparer le contenu multipart
                using var content = new MultipartFormDataContent();
                
                // Lire le fichier en mémoire
                var ms = new MemoryStream();
                await e.File.OpenReadStream(maxAllowedSize: 2 * 1024 * 1024).CopyToAsync(ms);
                ms.Position = 0;
                
                // Créer un StreamContent à partir du flux de mémoire
                var fileContent = new StreamContent(ms);
                fileContent.Headers.ContentType = new MediaTypeHeaderValue(e.File.ContentType);
                
                // Ajouter le fichier au contenu multipart
                content.Add(
                    content: fileContent,
                    name: "file",
                    fileName: e.File.Name
                );
                
                // Configurer l'en-tête d'autorisation
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                
                // Envoyer la requête à l'API
                var response = await Http.PostAsync("/api/users/avatar", content);
                
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<AvatarUploadResponse>();
                    if (result != null)
                    {
                        // Mettre à jour l'URL de l'avatar avec celle retournée par l'API
                        profile.AvatarUrl = result.AvatarUrl;
                        Snackbar.Add(result.Message, Severity.Success);
                    }
                }
                else
                {
                    Snackbar.Add("Erreur lors de l'upload de l'avatar", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Erreur: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task SaveProfileChanges()
    {
        isSaving = true;
        
        try
        {
            // Récupérer le token d'authentification
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            if (string.IsNullOrEmpty(token))
            {
                Snackbar.Add("Vous devez être connecté pour modifier votre profil", Severity.Warning);
                return;
            }
            
            // Préparer l'objet de mise à jour
            var updateRequest = new UpdateProfileRequest
            {
                Username = profile.Username,
                Bio = profile.Bio,
                // Ne pas inclure AvatarUrl ici car c'est géré par l'upload séparé
            };
            
            // Configurer l'en-tête d'autorisation
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            
            // Envoyer la requête à l'API
            var response = await Http.PutAsJsonAsync("/api/users/profile", updateRequest);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<UserProfileResponse>();
                if (result != null)
                {
                    Snackbar.Add("Profil mis à jour avec succès", Severity.Success);
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Erreur lors de la mise à jour du profil: {errorContent}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    public class ProfileModel
    {
        [Required(ErrorMessage = "Le pseudo est requis")]
        [StringLength(32, MinimumLength = 3, ErrorMessage = "Le pseudo doit contenir entre 3 et 32 caractères")]
        public string Username { get; set; }
        
        [StringLength(280, ErrorMessage = "La biographie ne peut pas dépasser 280 caractères")]
        public string Bio { get; set; }
        
        public string AvatarUrl { get; set; }
        
        public SocialLinks SocialLinks { get; set; } = new SocialLinks();
    }

    public class SocialLinks
    {
        public string Discord { get; set; }
        public string Youtube { get; set; }
        public string Twitch { get; set; }
        public string Website { get; set; }
    }

    private class UserProfileResponse
    {
        public string Id { get; set; } = string.Empty;
        public string Username { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string? ProfilePictureUrl { get; set; }
        public string? Bio { get; set; }
        public List<string> Roles { get; set; } = new List<string>();
        public DateTime CreatedAt { get; set; }
        public DateTime? LastLogin { get; set; }
    }

    private class UpdateProfileRequest
    {
        public string Username { get; set; } = string.Empty;
        public string? Bio { get; set; }
    }

    private class AvatarUploadResponse
    {
        public string AvatarUrl { get; set; } = string.Empty;
        public string Message { get; set; } = string.Empty;
        public DateTime UploadedAt { get; set; }
    }
}
