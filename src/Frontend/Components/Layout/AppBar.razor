@using Frontend.Theme
@inject IThemeService ThemeService
@inject NavigationManager NavigationManager
@implements IDisposable

<MudAppBar Color="Color.Transparent" Elevation="@_elevation" Class="appbar-blur" Fixed="true">
    <!-- Gauche -->
    <div class="d-flex align-center">
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Size="Size.Medium" Edge="Edge.Start" Class="ml-1" />
        <MudText Typo="Typo.h6" Class="logo-text mud-hidden-xs-down ml-2">Mods Hub</MudText>
    </div>

    <MudSpacer />

    <!-- Centre - visible seulement sur >= md -->
    <MudHidden Breakpoint="Breakpoint.SmAndDown" Class="d-flex justify-center align-center">
        <div class="d-flex">
            <MudNavLink Href="/discover" Class="mx-2 nav-link">Découvrir</MudNavLink>
            <MudNavLink Href="/games" Class="mx-2 nav-link">Jeux</MudNavLink>
            <MudNavLink Href="/creators" Class="mx-2 nav-link">Créateurs</MudNavLink>
            <MudNavLink Href="/forum" Class="mx-2 nav-link">Forum</MudNavLink>
        </div>
        <MudTextField T="string" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                      Placeholder="Rechercher un mod…" Class="search-input ml-4" />
    </MudHidden>

    <!-- Burger menu sur mobile -->
    <MudHidden Breakpoint="Breakpoint.MdAndUp">
        <MudIconButton Icon="@Icons.Material.Filled.Search" Color="Color.Inherit" OnClick="@OpenSearchDialog" 
                      aria-label="Rechercher" />
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" OnClick="@ToggleDrawer" 
                      aria-label="Menu" Class="ml-2" />
    </MudHidden>

    <!-- Droite -->
    <div class="d-flex align-center">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="uploader-button mud-hidden-xs-down mx-2"
                  StartIcon="@Icons.Material.Filled.Upload" OnClick="@(() => NavigationManager.NavigateTo("/upload"))">
            Uploader un mod
        </MudButton>
        
        <!-- Sur mobile: FAB circulaire -->
        <MudHidden Breakpoint="Breakpoint.SmAndUp">
            <MudFab Color="Color.Primary" Size="Size.Small" Icon="@Icons.Material.Filled.Add" 
                   Class="mx-1" aria-label="Uploader un mod" />
        </MudHidden>
        
        <MudBadge BadgeContent="@_notifCount.ToString()" Color="Color.Error" Overlap="true" 
                 Class="mx-2" Origin="Origin.TopRight" Bordered="true">
            <MudIconButton Icon="@Icons.Material.Filled.Notifications" Color="Color.Inherit" 
                          OnClick="@OpenNotificationsMenu" aria-label="Notifications" />
        </MudBadge>
        
        <MudIconButton Icon="@(_isDark ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)" 
                      Color="Color.Inherit" OnClick="@ToggleTheme" aria-label="Changer de thème" 
                      Class="theme-switch mx-2" />
        
        <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
            <ActivatorContent>
                <MudAvatar Size="Size.Medium" Class="mx-2 cursor-pointer" alt="Avatar de l'utilisateur">
                    <MudImage ObjectFit="ObjectFit.Cover" Src="@_avatarUrl" Alt="Avatar" />
                </MudAvatar>
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem Href="/profile">
                    <div class="d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.Person" Class="mr-2" />
                        Profil
                    </div>
                </MudMenuItem>
                <MudMenuItem Href="/settings">
                    <div class="d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.Settings" Class="mr-2" />
                        Paramètres
                    </div>
                </MudMenuItem>
                <MudDivider />
                <MudMenuItem OnClick="@Logout">
                    <div class="d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.Logout" Class="mr-2" />
                        Déconnexion
                    </div>
                </MudMenuItem>
            </ChildContent>
        </MudMenu>
    </div>
</MudAppBar>

<!-- Drawer pour mobile -->
<MudDrawer @bind-Open="_drawerOpen" Elevation="2" ClipMode="DrawerClipMode.Always" Variant="@DrawerVariant.Temporary">
    <MudDrawerHeader>
        <MudText Typo="Typo.h5" Class="ml-3">Mods Hub</MudText>
    </MudDrawerHeader>
    <MudNavMenu>
        <MudNavLink Href="/discover" Icon="@Icons.Material.Filled.Explore" Match="NavLinkMatch.All">
            Découvrir
        </MudNavLink>
        <MudNavLink Href="/games" Icon="@Icons.Material.Filled.SportsEsports" Match="NavLinkMatch.Prefix">
            Jeux
        </MudNavLink>
        <MudNavLink Href="/creators" Icon="@Icons.Material.Filled.Person" Match="NavLinkMatch.Prefix">
            Créateurs
        </MudNavLink>
        <MudNavLink Href="/forum" Icon="@Icons.Material.Filled.Forum" Match="NavLinkMatch.Prefix">
            Forum
        </MudNavLink>
        <MudDivider Class="my-2" />
        <MudNavLink Href="/upload" Icon="@Icons.Material.Filled.Upload" Class="mud-primary-text">
            Uploader un mod
        </MudNavLink>
    </MudNavMenu>
</MudDrawer>

<!-- Dialog de recherche (ouvert par le bouton sur mobile ou Ctrl+K) -->
<MudDialog @bind-IsVisible="_searchDialogOpen" Options="new DialogOptions { FullWidth = true, MaxWidth = MaxWidth.ExtraLarge }">
    <TitleContent>
        <MudText Typo="Typo.h6">Recherche</MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField T="string" @bind-Value="_searchQuery" Placeholder="Rechercher un mod, jeu ou créateur..." 
                     Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                     Immediate="true" FullWidth="true" Variant="Variant.Outlined"
                     @onkeydown="@SearchKeyDown" AutoFocus="true" />
        
        @if (!string.IsNullOrEmpty(_searchQuery) && _searchQuery.Length >= 2)
        {
            <MudList Class="mt-4" T="string">
                @foreach (var result in GetSearchResults())
                {
                    <MudListItem T="string" Icon="@Icons.Material.Filled.Article" OnClick="@(() => NavigateToResult(result))">
                        @result
                    </MudListItem>
                }
            </MudList>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => _searchDialogOpen = false)" Color="Color.Default">Fermer</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool _isDark = true;
    private int _elevation = 0;
    private int _notifCount = 3;
    private bool _drawerOpen = false;
    private bool _searchDialogOpen = false;
    private string _searchQuery = "";
    private string _avatarUrl = "images/avatar.jpg"; // Placeholder
    private DotNetObjectReference<AppBar> _objRef;

    protected override void OnInitialized()
    {
        _objRef = DotNetObjectReference.Create(this);
        _isDark = ThemeService.IsDarkMode;
        ThemeService.OnThemeChanged += ThemeChanged;

        // Ajouter le gestionnaire d'événements pour la touche Ctrl+K
        JSRuntime.InvokeVoidAsync("addKeyboardShortcut", _objRef);
    }

    [JSInvokable]
    public void HandleKeyboardShortcut(string key)
    {
        if (key == "ctrl+k")
        {
            _searchDialogOpen = true;
            StateHasChanged();
        }
        else if (key == "ctrl+shift+u")
        {
            NavigationManager.NavigateTo("/upload");
        }
    }

    private void SearchKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Escape")
        {
            _searchDialogOpen = false;
        }
        else if (args.Key == "Enter" && !string.IsNullOrEmpty(_searchQuery))
        {
            NavigateToResult(_searchQuery);
        }
    }

    private List<string> GetSearchResults()
    {
        // Simuler des résultats de recherche
        return new List<string>
        {
            $"Mod: {_searchQuery} Enhanced",
            $"Jeu contenant \"{_searchQuery}\"",
            $"Créateur spécialiste en {_searchQuery}"
        };
    }

    private void NavigateToResult(string result)
    {
        _searchDialogOpen = false;
        // Idéalement, cette fonction utiliserait un système de routage plus sophistiqué
        NavigationManager.NavigateTo($"/search?q={Uri.EscapeDataString(_searchQuery)}");
    }

    private void ToggleTheme()
    {
        _isDark = !_isDark;
        ThemeService.SetDarkMode(_isDark);
    }

    private void ThemeChanged(object sender, bool isDark)
    {
        _isDark = isDark;
        StateHasChanged();
    }

    private void ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void OpenSearchDialog()
    {
        _searchDialogOpen = true;
    }

    private void OpenNotificationsMenu()
    {
        // Logique pour ouvrir le menu des notifications
    }

    private void Logout()
    {
        // Logique de déconnexion
        NavigationManager.NavigateTo("/login");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Ajouter un event listener pour le scroll
            await JSRuntime.InvokeVoidAsync("addScrollListener", _objRef);
        }
    }

    [JSInvokable]
    public void HandleScroll(int scrollY)
    {
        var newElevation = scrollY > 10 ? 4 : 0;
        if (_elevation != newElevation)
        {
            _elevation = newElevation;
            StateHasChanged();
        }
    }

    [Inject] protected IJSRuntime JSRuntime { get; set; }

    public void Dispose()
    {
        ThemeService.OnThemeChanged -= ThemeChanged;
        JSRuntime.InvokeVoidAsync("removeScrollListener");
        JSRuntime.InvokeVoidAsync("removeKeyboardShortcut");
        _objRef?.Dispose();
    }
}
