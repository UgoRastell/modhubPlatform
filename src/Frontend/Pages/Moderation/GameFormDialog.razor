@using Frontend.Models
@using Frontend.Services
@inject IGameService GameService
@inject Frontend.Services.Interfaces.IModService ModService
@inject ISnackbar Snackbar
@using MudBlazor

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-height:70vh;overflow-y:auto;">
            <EditForm Model="@_gameRequest" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <!-- Informations de base -->
                <MudCard Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Informations de base</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudTextField @bind-Value="_gameRequest.Name" Label="Titre du jeu *" Variant="Variant.Outlined" Required="true" For="@(() => _gameRequest.Name)" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField @bind-Value="_gameRequest.Description" Label="Description" Variant="Variant.Outlined" Lines="4" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField @bind-Value="_gameRequest.ImageUrl" Label="URL du thumbnail" Variant="Variant.Outlined" />
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>

                <!-- Association des mods -->
                <MudCard Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Mods associés</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudSelect T="string" @bind-Value="_dummySelection" MultiSelection="true" Variant="Variant.Outlined" Label="Sélectionnez les mods">
                                    @if (_mods is not null)
                                    {
                                        @foreach (var mod in _mods)
                                        {
                                            <MudSelectItem Value="@mod.Id">@mod.Name</MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudText Typo="Typo.subtitle2">Nombre de mods : <b>@_selectedModIds.Count</b></MudText>
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudText Typo="Typo.subtitle2">Total downloads : <b>@_totalDownloads</b></MudText>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>

                <!-- Actions -->
                <MudStack Row="true" Justify="flex-end" Spacing="2">
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" Disabled="@_isSubmitting" ButtonType="ButtonType.Submit">Enregistrer</MudButton>
                    <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="Cancel">Annuler</MudButton>
                </MudStack>
            </EditForm>
        </MudContainer>
    </DialogContent>
</MudDialog>

@code {
    private GameCreateRequest _gameRequest = new();
    private List<ModDto> _mods = new();

    // Utilisé pour MudSelect (bind ne supporte pas directement List<string>)
    private List<string> _dummySelection
    {
        get => _selectedModIds;
        set
        {
            _selectedModIds = value;
            _gameRequest.ModIds = value;
            RecalculateDownloads();
        }
    }

    private List<string> _selectedModIds = new();
    private long _totalDownloads;
    private bool _isSubmitting;

    protected override async Task OnInitializedAsync()
    {
        await LoadModsAsync();
    }

    private async Task LoadModsAsync()
    {
        try
        {
            // Charger une grande page pour récupérer beaucoup de mods (ajuster si nécessaire)
            var apiResp = await ModService.GetModsAsync(1, 1000);
            if (apiResp.Success && apiResp.Data is not null)
            {
                _mods = apiResp.Data.Items.ToList();
            }
            else
            {
                Snackbar.Add(apiResp.Message ?? "Erreur lors du chargement des mods", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur lors du chargement des mods: {ex.Message}", Severity.Error);
        }
    }

    private void RecalculateDownloads()
    {
        _totalDownloads = _mods.Where(m => _selectedModIds.Contains(m.Id)).Sum(m => m.DownloadCount);
    }

    private async Task OnValidSubmit()
    {
        if (_isSubmitting) return;
        _isSubmitting = true;

        try
        {
            var result = await GameService.CreateGameAsync(_gameRequest);
            if (result.Success)
            {
                MudDialog.Close(DialogResult.Ok(result.Data));
            }
            else
            {
                Snackbar.Add(result.Message ?? "Une erreur est survenue", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}
