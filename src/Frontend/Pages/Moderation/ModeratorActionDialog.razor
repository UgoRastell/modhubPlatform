@using Frontend.Models.Moderation
@using Frontend.Services.Moderation
@inject IModerationService ModerationService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-3">Prendre une action de modération</MudText>
        
        <MudText Typo="Typo.body2" Class="mb-4">
            Choisissez l'action appropriée à prendre pour résoudre ce signalement.
            Cette action sera enregistrée et le signalement sera marqué comme résolu.
        </MudText>
        
        <MudForm @ref="_form" @bind-IsValid="_formIsValid">
            <MudRadioGroup<ModeratorAction> @bind-SelectedOption="_request.Action" Required="true" RequiredError="Veuillez sélectionner une action" Class="mb-3">
                <MudText Typo="Typo.subtitle2" Class="mb-2">Action à prendre:</MudText>
                
                <MudRadio<ModeratorAction> Option="@(ModeratorAction.ContentRemoved)" Color="Color.Error">
                    Supprimer le contenu
                </MudRadio>
                <MudText Typo="Typo.caption" Class="ml-4 mb-2">Supprime définitivement le contenu signalé</MudText>
                
                <MudRadio<ModeratorAction> Option="@(ModeratorAction.ContentEdited)" Color="Color.Warning">
                    Éditer le contenu
                </MudRadio>
                <MudText Typo="Typo.caption" Class="ml-4 mb-2">Modifie le contenu pour supprimer ou corriger la partie problématique</MudText>
                
                <MudRadio<ModeratorAction> Option="@(ModeratorAction.UserWarned)" Color="Color.Info">
                    Avertir l'utilisateur
                </MudRadio>
                <MudText Typo="Typo.caption" Class="ml-4 mb-2">Envoie un avertissement à l'utilisateur concernant son comportement</MudText>
                
                <MudRadio<ModeratorAction> Option="@(ModeratorAction.UserSuspended)" Color="Color.Warning">
                    Suspendre l'utilisateur
                </MudRadio>
                <MudText Typo="Typo.caption" Class="ml-4 mb-2">Suspend temporairement l'accès de l'utilisateur à la plateforme</MudText>
                
                <MudRadio<ModeratorAction> Option="@(ModeratorAction.UserBanned)" Color="Color.Error">
                    Bannir l'utilisateur
                </MudRadio>
                <MudText Typo="Typo.caption" Class="ml-4 mb-2">Bannit définitivement l'utilisateur de la plateforme</MudText>
                
                <MudRadio<ModeratorAction> Option="@(ModeratorAction.ReportRejected)" Color="Color.Default">
                    Rejeter le signalement
                </MudRadio>
                <MudText Typo="Typo.caption" Class="ml-4 mb-2">Rejette le signalement car le contenu ne viole pas les règles</MudText>
                
                <MudRadio<ModeratorAction> Option="@(ModeratorAction.EscalatedToAdmin)" Color="Color.Secondary">
                    Escalader aux administrateurs
                </MudRadio>
                <MudText Typo="Typo.caption" Class="ml-4 mb-2">Transfère le signalement à un administrateur pour une décision finale</MudText>
                
                <MudRadio<ModeratorAction> Option="@(ModeratorAction.NoAction)" Color="Color.Default">
                    Aucune action
                </MudRadio>
                <MudText Typo="Typo.caption" Class="ml-4 mb-2">Marquer comme résolu sans prendre d'action supplémentaire</MudText>
            </MudRadioGroup>
            
            <MudTextField T="string"
                        Label="Notes de modération"
                        HelperText="Expliquez la raison de votre action (visible par les autres modérateurs)"
                        Lines="3"
                        Counter="500"
                        MaxLength="500"
                        @bind-Value="_request.Notes"
                        Required="true"
                        RequiredError="Veuillez fournir une explication pour votre action" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Text" Color="Color.Default">Annuler</MudButton>
        <MudButton OnClick="Submit" 
                 Variant="Variant.Filled" 
                 Color="Color.Primary" 
                 Disabled="@(!_formIsValid || _isSubmitting)">
            @if (_isSubmitting)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <span class="ms-2">Traitement en cours</span>
            }
            else
            {
                <span>Appliquer l'action</span>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public ContentReport Report { get; set; } = new();
    
    private ModeratorActionRequest _request = new();
    private MudForm _form = new();
    private bool _formIsValid;
    private bool _isSubmitting;
    
    private async Task Submit()
    {
        await _form.Validate();
        
        if (!_formIsValid)
            return;
            
        _isSubmitting = true;
        
        try
        {
            await ModerationService.TakeModeratorActionAsync(Report.Id, _request);
            
            var actionText = _request.Action switch
            {
                ModeratorAction.ContentRemoved => "Le contenu a été supprimé",
                ModeratorAction.ContentEdited => "Le contenu a été édité",
                ModeratorAction.UserWarned => "L'utilisateur a été averti",
                ModeratorAction.UserSuspended => "L'utilisateur a été suspendu",
                ModeratorAction.UserBanned => "L'utilisateur a été banni",
                ModeratorAction.ReportRejected => "Le signalement a été rejeté",
                ModeratorAction.EscalatedToAdmin => "Le signalement a été escaladé aux administrateurs",
                _ => "L'action a été appliquée"
            };
            
            Snackbar.Add($"Action appliquée avec succès. {actionText}.", Severity.Success);
            
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur lors de l'application de l'action: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSubmitting = false;
        }
    }
    
    private void Cancel() => MudDialog.Cancel();
}
