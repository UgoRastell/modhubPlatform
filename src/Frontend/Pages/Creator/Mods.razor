@page "/creator/my-mods"
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@using Frontend.Models
@using Frontend.Models.ModManagement
@using Frontend.Services
// Utilisation de l'alias pour éviter l'ambiguïté entre les deux IModService
@using InterfacesNamespace = Frontend.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject Frontend.Services.IModService ModService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject HttpClient Http
@attribute [Authorize(Roles = "Creator")]

<PageTitle>ModHub - Mes Mods</PageTitle>

<style>
    .mods-section {
        background: linear-gradient(180deg, rgba(21,21,35,0.95) 0%, rgba(42,45,80,0.85) 100%);
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.15), 0 1px 6px rgba(0,0,0,0.1);
        overflow: hidden;
        position: relative;
        transition: all 0.3s ease;
    }
    
    .mods-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 100%;
        background: linear-gradient(135deg, rgba(255,255,255,0.05) 0%, rgba(255,255,255,0) 100%);
        pointer-events: none;
    }
    
    .gradient-title {
        background: linear-gradient(90deg, var(--mud-palette-primary), var(--mud-palette-secondary));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        display: inline-block;
        font-weight: bold;
        position: relative;
    }
    
    .animated-gradient-divider {
        height: 1px;
        background: linear-gradient(90deg, transparent, var(--mud-palette-primary), transparent);
        position: relative;
        overflow: hidden;
        margin: 2rem 0;
    }

    .mod-card {
        height: 100%;
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        background: linear-gradient(135deg, rgba(30,30,50,0.9) 0%, rgba(50,55,100,0.8) 100%);
        border: 1px solid rgba(255,255,255,0.1);
    }

    .mod-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 25px rgba(0,0,0,0.2);
    }

    .mod-card-image {
        height: 180px;
        object-fit: cover;
    }

    .mod-card-stats {
        font-size: 0.85rem;
        opacity: 0.8;
    }

    .premium-badge {
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 2;
    }

    .empty-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 3rem 1rem;
    }

    .empty-state-icon {
        font-size: 3rem;
        opacity: 0.5;
    }
</style>

<AuthorizeView Roles="Creator">
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="py-8">
            <div class="d-flex justify-space-between align-center mb-6">
                <MudText Typo="Typo.h2" Class="gradient-title">Mes Mods</MudText>
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary" 
                           StartIcon="@Icons.Material.Filled.Add" 
                           OnClick="@(() => NavigationManager.NavigateTo("/creator/upload"))">
                    Publier un nouveau mod
                </MudButton>
            </div>
            
            <MudPaper Elevation="3" Class="mods-section px-4 py-6 mb-8">
                @if (isLoading)
                {
                    <div class="d-flex justify-center my-8">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    </div>
                }
                else if (myMods == null || myMods.Count == 0)
                {
                    <div class="empty-state">
                        <MudIcon Icon="@Icons.Material.Outlined.Inventory2" Class="empty-state-icon mb-4" />
                        <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Vous n'avez pas encore publié de mods</MudText>
                        <MudText Typo="Typo.body1" Align="Align.Center" Class="mb-6">Créez votre premier mod pour le partager avec la communauté ModHub</MudText>
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary" 
                                   StartIcon="@Icons.Material.Filled.Add" 
                                   OnClick="@(() => NavigationManager.NavigateTo("/creator/upload"))">
                            Publier un mod
                        </MudButton>
                    </div>
                }
                else
                {
                    <MudGrid Spacing="4">
                        @foreach (var mod in myMods)
                        {
                            <MudItem xs="12" sm="6" md="4" lg="3">
                                <MudCard Class="mod-card">
                                    @if (mod.IsPremium)
                                    {
                                        <MudChip T="string" Color="Color.Warning" Size="Size.Small" Class="premium-badge">Premium</MudChip>
                                    }
                                    <MudCardMedia Image="@(string.IsNullOrEmpty(mod.ThumbnailUrl) ? "/images/default-mod-thumbnail.jpg" : mod.ThumbnailUrl)" 
                                                  Class="mod-card-image" />
                                    <MudCardContent>
                                        <MudText Typo="Typo.h6">@mod.Name</MudText>
                                        <MudText Typo="Typo.body2" Class="mud-text-secondary mb-2">@mod.GameName</MudText>
                                        <MudText Typo="Typo.body2" Class="text-truncate mb-2">
                                            @(mod.Description.Length > 100 ? mod.Description.Substring(0, 97) + "..." : mod.Description)
                                        </MudText>
                                        <div class="d-flex justify-space-between align-center mod-card-stats">
                                            <MudText Typo="Typo.caption">
                                                <span class="mud-text-primary">v@(mod.Version)</span> • 
                                                <span>@mod.DownloadCount téléch.</span>
                                            </MudText>
                                            <MudRating ReadOnly="true" SelectedValue="@((int)Math.Round(mod.Rating))" />
                                        </div>
                                        <div class="mt-2">
                                            @foreach (var tag in mod.Tags.Take(3))
                                            {
                                                <MudChip T="string" Size="Size.Small" Color="Color.Default">@tag</MudChip>
                                            }
                                            @if (mod.Tags.Count > 3)
                                            {
                                                <MudChip T="string" Size="Size.Small" Color="Color.Default">+@(mod.Tags.Count - 3)</MudChip>
                                            }
                                        </div>
                                    </MudCardContent>
                                    <MudCardActions>
                                        <MudButton FullWidth="true" 
                                                   Variant="Variant.Text" 
                                                   Color="Color.Primary"
                                                   OnClick="@(() => EditMod(mod.Id))">
                                            Modifier
                                        </MudButton>
                                        <MudButton FullWidth="true"
                                                   Variant="Variant.Text"
                                                   Color="Color.Error"
                                                   OnClick="@(() => DeleteMod(mod.Id))">
                                            Supprimer
                                        </MudButton>
                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>
                }
            </MudPaper>
        </MudContainer>
    </Authorized>
    <NotAuthorized>
        <MudContainer MaxWidth="MaxWidth.Small" Class="py-8">
            <MudPaper Elevation="3" Class="mods-section px-4 py-6">
                <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Accès réservé aux créateurs</MudText>
                <MudText Typo="Typo.body1" Align="Align.Center" Class="mb-6">
                    Vous devez être connecté avec un compte créateur pour accéder à cette page.
                </MudText>
                <div class="d-flex justify-center">
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary" 
                               OnClick="@(() => NavigationManager.NavigateTo("/login"))">
                        Se connecter
                    </MudButton>
                </div>
            </MudPaper>
        </MudContainer>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool isLoading = true;
    private string errorMessage;
    private List<ModDto> myMods = new();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadMyMods();
    }
    
    private async Task LoadMyMods()
    {
        try
        {
            isLoading = true;
            
            // Récupérer l'utilisateur actuel pour son ID créateur
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            
            if (user.Identity.IsAuthenticated)
            {
                // Récupérer l'ID du créateur à partir des claims
                var creatorId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? 
                                user.FindFirst("sub")?.Value ?? "unknown-user";
                
                // Utiliser le ModService pour récupérer les mods depuis MongoDB
                var modsInfo = await ModService.GetCreatorModsAsync(creatorId);
                
                // Convertir les ModInfo en ModDto pour l'affichage
                myMods = modsInfo.Select(m => new ModDto
                {
                    Id = m.Id,
                    Name = m.Title,
                    Description = m.Description,
                    ThumbnailUrl = m.ThumbnailUrl,
                    GameId = m.Game?.Split('-').FirstOrDefault() ?? "",
                    GameName = m.Game,
                    Rating = m.Rating,
                    ReviewCount = m.RatingCount,
                    DownloadCount = m.Downloads,
                    Tags = m.Category?.Split(',').ToList() ?? new List<string>(),
                    IsPremium = m.Price > 0,
                    IsNew = (DateTime.Now - m.CreatedDate).TotalDays < 7,
                    CreatedAt = m.CreatedDate,
                    UpdatedAt = m.UpdatedDate,
                    Version = m.Version,
                    FileSize = 0 // Information non disponible dans ModInfo
                }).ToList();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors du chargement des mods: {ex.Message}";
            Snackbar.Add(errorMessage, Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void EditMod(string modId)
    {
        NavigationManager.NavigateTo($"/creator/edit/{modId}");
    }
    
    private async Task DeleteMod(string modId)
    {
        var mod = myMods.FirstOrDefault(m => m.Id == modId);
        if (mod == null) return;
        
        bool? result = await JSRuntime.InvokeAsync<bool>("confirm", $"Êtes-vous sûr de vouloir supprimer le mod {mod.Name} ? Cette action est irréversible.");
        
        if (result == true)
        {
            try
            {
                var response = await Http.DeleteAsync($"api/v1/mods/{modId}");
                
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Mod supprimé avec succès", Severity.Success);
                    myMods.Remove(mod);
                    StateHasChanged();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    Snackbar.Add($"Échec de la suppression: {error}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Erreur lors de la suppression: {ex.Message}", Severity.Error);
            }
        }
    }

    public class ModDto
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string Author { get; set; }
        public string CreatorId { get; set; }
        public string GameId { get; set; }
        public string GameName { get; set; }
        public string ThumbnailUrl { get; set; }
        public double Rating { get; set; }
        public int ReviewCount { get; set; }
        public int DownloadCount { get; set; }
        public List<string> Tags { get; set; } = new List<string>();
        public bool IsPremium { get; set; }
        public bool IsNew { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime UpdatedAt { get; set; }
        public string FileLocation { get; set; }
        public string FileName { get; set; }
        public string MimeType { get; set; }
        public long FileSize { get; set; }
        public string Version { get; set; }
    }
    
    public class ApiResponse<T>
    {
        public bool Success { get; set; }
        public string Message { get; set; }
        public T Data { get; set; }
    }
}
