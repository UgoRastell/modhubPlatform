@page "/creator/upload"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using System.IO
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Authorization
@using Frontend.Models
@using Frontend.Services
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject ILocalFileStorageService LocalFileStorage
@attribute [Authorize(Roles = "Creator")]

<PageTitle>ModHub - Publier un mod</PageTitle>

<style>
    .upload-section {
        background: linear-gradient(180deg, rgba(21,21,35,0.95) 0%, rgba(42,45,80,0.85) 100%);
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.15), 0 1px 6px rgba(0,0,0,0.1);
        overflow: hidden;
        position: relative;
        transition: all 0.3s ease;
    }
    
    .upload-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 100%;
        background: linear-gradient(135deg, rgba(255,255,255,0.05) 0%, rgba(255,255,255,0) 100%);
        pointer-events: none;
    }
    
    .gradient-title {
        background: linear-gradient(90deg, var(--mud-palette-primary), var(--mud-palette-secondary));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        display: inline-block;
        font-weight: bold;
        position: relative;
    }
    
    .animated-gradient-divider {
        height: 1px;
        background: linear-gradient(90deg, transparent, var(--mud-palette-primary), transparent);
        position: relative;
        overflow: hidden;
        margin: 2rem 0;
    }
</style>

<AuthorizeView Roles="Creator">
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.Large" Class="py-8">
            <MudText Typo="Typo.h2" Align="Align.Center" Class="gradient-title mb-8">Publier un nouveau mod</MudText>
            
            <MudPaper Elevation="3" Class="upload-section px-4 py-6 mb-8">
                <MudGrid>
                    <MudItem xs="12" md="10" Class="mx-auto">
                        <MudForm @ref="form" @bind-IsValid="@success">
                            <MudTextField @bind-Value="modName" Label="Nom du mod" 
                                Required="true" RequiredError="Le nom est requis"
                                Variant="Variant.Outlined" Class="mb-4" 
                                HelperText="Un titre clair et descriptif pour votre mod"/>
                                
                            <MudSelect T="string" @bind-Value="selectedGame" Label="Jeu" 
                                Required="true" RequiredError="Le jeu est requis"
                                Variant="Variant.Outlined" Class="mb-4">
                                @foreach (var game in games)
                                {
                                    <MudSelectItem T="string" Value="@game.Id">@game.Name</MudSelectItem>
                                }
                            </MudSelect>
                            
                            <MudTextField @bind-Value="modDescription" Label="Description" 
                                Required="true" RequiredError="La description est requise"
                                Lines="5" Variant="Variant.Outlined" Class="mb-4" 
                                HelperText="Décrivez votre mod en détail (fonctionnalités, installation, etc.)"/>
                                
                            <MudTextField @bind-Value="modVersion" Label="Version" 
                                Required="true" RequiredError="La version est requise"
                                Variant="Variant.Outlined" Class="mb-4" 
                                HelperText="Format recommandé: X.Y.Z (ex: 1.0.0)"/>
                                
                            <MudTextField @bind-Value="tagsInput" Label="Tags (séparés par des virgules)" 
                                Variant="Variant.Outlined" Class="mb-4"
                                HelperText="Facilitez la recherche avec des tags pertinents" />
                                
                            <div class="d-flex flex-column gap-4 mb-6">
                                <MudFileUpload T="IBrowserFile" FilesChanged="OnModFileChanged" Accept=".zip,.rar" Class="upload-button">
                                    <ActivatorContent>
                                        <MudButton HtmlTag="label"
                                            Variant="Variant.Filled"
                                            Color="Color.Primary"
                                            StartIcon="@Icons.Material.Filled.CloudUpload"
                                            Class="upload-button"
                                            for="@context">
                                            Fichier du mod (ZIP/RAR)
                                        </MudButton>
                                    </ActivatorContent>
                                    <SelectedTemplate Context="selectedModFile">
                                        @if (selectedModFile != null)
                                        {
                                            <MudChip T="string" Color="Color.Info" Text="@selectedModFile.Name" />
                                        }
                                    </SelectedTemplate>
                                </MudFileUpload>
                                
                                @if (!string.IsNullOrEmpty(modFileName))
                                {
                                    <MudText Typo="Typo.body2" Class="ml-2">@modFileName</MudText>
                                }
                            
                                <MudFileUpload T="IBrowserFile" FilesChanged="OnThumbnailFileChanged" Accept=".jpg,.jpeg,.png" Class="mt-4 upload-button">
                                    <ActivatorContent>
                                        <MudButton HtmlTag="label"
                                            Variant="Variant.Filled"
                                            Color="Color.Secondary"
                                            StartIcon="@Icons.Material.Filled.Image"
                                            Class="upload-button"
                                            for="@context">
                                            Image miniature (JPG/PNG)
                                        </MudButton>
                                    </ActivatorContent>
                                    <SelectedTemplate Context="selectedThumbnailFile">
                                        @if (selectedThumbnailFile != null)
                                        {
                                            <MudChip T="string" Color="Color.Success" Text="@selectedThumbnailFile.Name" />
                                        }
                                    </SelectedTemplate>
                                </MudFileUpload>
                                
                                @if (!string.IsNullOrEmpty(thumbnailFileName))
                                {
                                    <MudText Typo="Typo.body2" Class="ml-2">@thumbnailFileName</MudText>
                                }
                            </div>
                            
                            <div class="d-flex justify-space-between mt-6 gap-3">
                                <MudButton Variant="Variant.Outlined"
                                    Color="Color.Error"
                                    OnClick="@(() => NavigationManager.NavigateTo("/creator/mods"))">
                                    Annuler
                                </MudButton>
                                <MudButton Variant="Variant.Filled"
                                    Color="Color.Primary"
                                    OnClick="@(UploadMod)"
                                    Disabled="@(!success || isUploading)"
                                    StartIcon="@Icons.Material.Filled.Publish"
                                    Class="upload-button">
                                    @if (isUploading)
                                    {
                                        <span>Publication en cours...</span>
                                        <MudProgressCircular Class="ms-2" Size="Size.Small" Indeterminate="true" />
                                    }
                                    else
                                    {
                                        <span>Publier le mod</span>
                                    }
                                </MudButton>
                            </div>
                        </MudForm>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudContainer>
    </Authorized>
    <NotAuthorized>
        <MudContainer MaxWidth="MaxWidth.Small" Class="py-8">
            <MudPaper Elevation="3" Class="upload-section px-4 py-6">
                <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Accès restreint</MudText>
                <MudText Align="Align.Center">Vous devez être authentifié et avoir le rôle "Creator" pour accéder à cette page.</MudText>
                <div class="d-flex justify-center mt-4">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                        OnClick="@(() => NavigationManager.NavigateTo("/login"))">
                        Se connecter
                    </MudButton>
                </div>
            </MudPaper>
        </MudContainer>
    </NotAuthorized>
</AuthorizeView>

@code {
    private MudForm form;
    private bool success;
    private bool isUploading = false;
    
    private string modName = "";
    private string selectedGame = "";
    private string modDescription = "";
    private string modVersion = "";
    private string tagsInput = "";
    
    private IBrowserFile modFile;
    private IBrowserFile thumbnailFile;
    private string modFileName = "";
    private string thumbnailFileName = "";
    
    private List<GameDto> games = new List<GameDto>();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadGames();
    }
    
    private async Task LoadGames()
    {
        try
        {
            // Simulation - à remplacer par un appel API
            games = new List<GameDto>
            {
                new GameDto { Id = "1", Name = "Skyrim" },
                new GameDto { Id = "2", Name = "Fallout 4" },
                new GameDto { Id = "3", Name = "Cyberpunk 2077" },
                new GameDto { Id = "4", Name = "Minecraft" },
                new GameDto { Id = "5", Name = "The Witcher 3" }
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur lors du chargement des jeux: {ex.Message}", Severity.Error);
        }
    }
    
    private void OnModFileChanged(IBrowserFile file)
    {
        modFile = file;
        modFileName = file?.Name ?? "";
        StateHasChanged();
    }
    
    private void OnThumbnailFileChanged(IBrowserFile file)
    {
        thumbnailFile = file;
        thumbnailFileName = file?.Name ?? "";
        StateHasChanged();
    }
    
    private async Task UploadMod()
    {
        if (!form.IsValid)
        {
            Snackbar.Add("Veuillez remplir tous les champs requis", Severity.Warning);
            return;
        }
        
        if (modFile == null)
        {
            Snackbar.Add("Veuillez sélectionner un fichier de mod", Severity.Warning);
            return;
        }
        
        if (thumbnailFile == null)
        {
            Snackbar.Add("Veuillez sélectionner une image miniature", Severity.Warning);
            return;
        }
        
        try
        {
            isUploading = true;
            
            // Préparation des données
            var content = new MultipartFormDataContent();
            
            // Ajout des métadonnées
            content.Add(new StringContent(modName), "name");
            content.Add(new StringContent(selectedGame), "gameId");
            content.Add(new StringContent(modDescription), "description");
            content.Add(new StringContent(modVersion), "version");
            content.Add(new StringContent(tagsInput), "tags");
            
            // Ajout des fichiers
            var modStream = modFile.OpenReadStream(maxAllowedSize: 50 * 1024 * 1024); // 50 MB max
            var modContent = new StreamContent(modStream);
            modContent.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");
            content.Add(modContent, "modFile", modFile.Name);
            
            var thumbnailStream = thumbnailFile.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024); // 5 MB max
            var thumbnailContent = new StreamContent(thumbnailStream);
            thumbnailContent.Headers.ContentType = new MediaTypeHeaderValue("image/jpeg");
            content.Add(thumbnailContent, "thumbnailFile", thumbnailFile.Name);
            
            // Envoi de la requête
            var response = await Http.PostAsync("api/v1/mods/upload", content);
            
            if (response.IsSuccessStatusCode)
            {
                try
                {
                    // Récupérer la réponse pour obtenir l'ID du mod
                    var responseContent = await response.Content.ReadAsStringAsync();
                    var uploadResult = JsonSerializer.Deserialize<UploadResponseDto>(responseContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    
                    if (uploadResult?.Id != null)
                    {
                        // Copier automatiquement les fichiers vers wwwroot/uploads/mods
                        Snackbar.Add("Upload réussi, copie des fichiers en cours...", Severity.Info);
                        
                        // Copier le thumbnail
                        var thumbnailUrl = await LocalFileStorage.SaveThumbnailAsync(uploadResult.Id, thumbnailFile);
                        Console.WriteLine($"Thumbnail copié: {thumbnailUrl}");
                        
                        // Copier le fichier ZIP
                        var modFileUrl = await LocalFileStorage.SaveModFileAsync(uploadResult.Id, modFile);
                        Console.WriteLine($"Fichier mod copié: {modFileUrl}");
                        
                        Snackbar.Add("Mod publié et fichiers copiés avec succès!", Severity.Success);
                    }
                    else
                    {
                        Snackbar.Add("Mod publié avec succès!", Severity.Success);
                    }
                }
                catch (Exception copyEx)
                {
                    Console.WriteLine($"Erreur lors de la copie des fichiers: {copyEx.Message}");
                    Snackbar.Add("Mod publié mais erreur lors de la copie locale des fichiers", Severity.Warning);
                }
                
                NavigationManager.NavigateTo("/creator/mods");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Échec de la publication: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur lors de la publication: {ex.Message}", Severity.Error);
        }
        finally
        {
            isUploading = false;
        }
    }
    
    public class GameDto
    {
        public string Id { get; set; }
        public string Name { get; set; }
    }
    
    public class UploadResponseDto
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Message { get; set; }
        public bool Success { get; set; }
    }
}
