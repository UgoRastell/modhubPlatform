@page "/creator/dashboard"
@using Microsoft.AspNetCore.Components.Authorization
@using Frontend.Models
@using Frontend.Models.ModManagement
@using System.Security.Claims
@using System.Globalization
@inject IModService ModService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@attribute [Authorize(Roles = "Creator")]

<PageTitle>Tableau de bord créateur | ModHub</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Tableau de bord créateur</MudText>
    <MudDivider Class="mb-4" />
    
    @if (loading)
    {
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" Class="my-7 d-flex mx-auto" />
    }
    else
    {
        <MudGrid>
            <MudItem xs="12" md="6" lg="3">
                <MudPaper Elevation="3" Class="pa-4 mud-height-full">
                    <MudStack>
                        <MudText Typo="Typo.subtitle1"><MudIcon Icon="@Icons.Material.Filled.Extension" Class="me-2" /> Mods publiés</MudText>
                        <MudText Typo="Typo.h3" Color="Color.Primary" Class="mb-n2">@statistics.TotalMods</MudText>
                        <MudText Typo="Typo.caption">Dont @statistics.ActiveMods actifs</MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>
            
            <MudItem xs="12" md="6" lg="3">
                <MudPaper Elevation="3" Class="pa-4 mud-height-full">
                    <MudStack>
                        <MudText Typo="Typo.subtitle1"><MudIcon Icon="@Icons.Material.Filled.Download" Class="me-2" /> Téléchargements</MudText>
                        <MudText Typo="Typo.h3" Color="Color.Secondary" Class="mb-n2">@statistics.TotalDownloads.ToString("N0", CultureInfo.CurrentCulture)</MudText>
                        <MudText Typo="Typo.caption">+@statistics.MonthlyDownloads.ToString("N0", CultureInfo.CurrentCulture) ce mois-ci</MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>
            
            <MudItem xs="12" md="6" lg="3">
                <MudPaper Elevation="3" Class="pa-4 mud-height-full">
                    <MudStack>
                        <MudText Typo="Typo.subtitle1"><MudIcon Icon="@Icons.Material.Filled.StarRate" Class="me-2" /> Évaluations</MudText>
                        <MudText Typo="Typo.h3" Color="Color.Tertiary" Class="mb-n2">@statistics.AverageRating.ToString("0.0", CultureInfo.InvariantCulture)
                            <span style="font-size: 60%; opacity: 0.7;">/5.0</span>
                        </MudText>
                        <MudText Typo="Typo.caption">Sur @statistics.TotalRatings évaluations</MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>
            
            <MudItem xs="12" md="6" lg="3">
                <MudPaper Elevation="3" Class="pa-4 mud-height-full">
                    <MudStack>
                        <MudText Typo="Typo.subtitle1"><MudIcon Icon="@Icons.Material.Filled.Payments" Class="me-2" /> Revenus</MudText>
                        <MudText Typo="Typo.h3" Color="Color.Success" Class="mb-n2">@statistics.MonthlyRevenue.ToString("C", CultureInfo.CurrentCulture)</MudText>
                        <MudText Typo="Typo.caption">Ce mois-ci</MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>
            
            <MudItem xs="12" md="8">
                <MudPaper Elevation="3" Class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-4">Activité récente</MudText>
                    
                    @if (recentActivity.Count > 0)
                    {
                        <MudTimeline TimelinePosition="TimelinePosition.Left" TimelineAlign="TimelineAlign.Default">
                            @foreach (var activity in recentActivity)
                            {
                                <MudTimelineItem Color="@GetActivityColor(activity.Type)" Size="Size.Small" 
                                               Icon="@GetActivityIcon(activity.Type)" Elevation="0">
                                    <ItemOpposite>
                                        <MudText Typo="Typo.body2" Color="Color.Default">@activity.DateTime.ToString("dd MMM, HH:mm", CultureInfo.CurrentCulture)</MudText>
                                    </ItemOpposite>
                                    <ItemContent>
                                        <MudText Typo="Typo.body1" Class="mb-n2">@activity.Title</MudText>
                                        <MudText Typo="Typo.body2">@activity.Description</MudText>
                                    </ItemContent>
                                </MudTimelineItem>
                            }
                        </MudTimeline>
                    }
                    else
                    {
                        <MudText Typo="Typo.body1" Class="my-4 d-flex justify-center">Aucune activité récente</MudText>
                    }
                </MudPaper>
            </MudItem>
            
            <MudItem xs="12" md="4">
                <MudPaper Elevation="3" Class="pa-4 mud-height-full">
                    <MudText Typo="Typo.h6" Class="mb-4">Mods populaires</MudText>
                    
                    @if (popularMods.Count > 0)
                    {
                        <MudList T="string" Clickable="true" Class="py-0">
                            @foreach (var mod in popularMods)
                            {
                                <MudListItem T="string" Icon="@Icons.Material.Filled.Extension" 
                                            OnClick="@(() => NavigationManager.NavigateTo($"/mods/{mod.Id}"))" 
                                            Class="pa-0 mb-2">
                                    <div class="d-flex align-center justify-space-between w-100">
                                        <div>
                                            <MudText Typo="Typo.body1">@mod.Title</MudText>
                                            <MudText Typo="Typo.caption">@mod.DownloadsCount téléchargements</MudText>
                                        </div>
                                        <MudRating ReadOnly="true" SelectedValue="@mod.Rating" Max="5" />
                                    </div>
                                </MudListItem>
                                <MudDivider Class="my-2" />
                            }
                        </MudList>
                    }
                    else
                    {
                        <MudText Typo="Typo.body1" Class="my-4 d-flex justify-center">Aucun mod publié</MudText>
                    }
                    
                    <MudButton Variant="Variant.Text" Color="Color.Primary" FullWidth="true" 
                              Class="mt-4" Href="/creator/mods">
                        Voir tous les mods
                    </MudButton>
                </MudPaper>
            </MudItem>
            
            <MudItem xs="12">
                <MudPaper Elevation="3" Class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-4">Actions rapides</MudText>
                    
                    <MudGrid>
                        <MudItem xs="12" sm="6" md="3">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" 
                                      StartIcon="@Icons.Material.Filled.Upload" Class="py-3"
                                      Href="/creator/upload">
                                Publier un nouveau mod
                            </MudButton>
                        </MudItem>
                        
                        <MudItem xs="12" sm="6" md="3">
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" FullWidth="true" 
                                      StartIcon="@Icons.Material.Filled.ViewList" Class="py-3"
                                      Href="/creator/mods">
                                Gérer mes mods
                            </MudButton>
                        </MudItem>
                        
                        <MudItem xs="12" sm="6" md="3">
                            <MudButton Variant="Variant.Filled" Color="Color.Tertiary" FullWidth="true" 
                                      StartIcon="@Icons.Material.Filled.Analytics" Class="py-3"
                                      Href="/creator/analytics">
                                Voir les statistiques
                            </MudButton>
                        </MudItem>
                        
                        <MudItem xs="12" sm="6" md="3">
                            <MudButton Variant="Variant.Filled" Color="Color.Success" FullWidth="true" 
                                      StartIcon="@Icons.Material.Filled.Payments" Class="py-3"
                                      Href="/creator/revenue">
                                Gérer mes revenus
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    private bool loading = true;
    private CreatorStatistics statistics = new();
    private List<CreatorActivity> recentActivity = new();
    private List<PopularMod> popularMods = new();
    
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Récupérer l'ID de l'utilisateur connecté
            var authState = await AuthenticationStateTask;
            var user = authState.User;
            
            if (!user.Identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }
            
            var currentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? 
                               user.FindFirst("sub")?.Value ?? "unknown-user";
            
            // Récupérer les mods de l'utilisateur depuis MongoDB
            var userMods = await ModService.GetCreatorModsAsync(currentUserId);
            
            // Calculer les statistiques
            statistics = CalculateStatistics(userMods);
            
            // Récupérer les mods populaires (triés par téléchargements)
            popularMods = userMods
                .OrderByDescending(m => m.Downloads)
                .Take(5)
                .Select(m => new PopularMod { 
                    Id = m.Id, 
                    Title = m.Title, 
                    DownloadsCount = m.Downloads, 
                    Rating = (int)Math.Round(m.Rating) 
                })
                .ToList();
            
            // Générer l'activité récente basée sur les mods
            // Note: Idéalement cette donnée viendrait d'une collection dédiée dans MongoDB
            recentActivity = GenerateRecentActivityFromMods(userMods);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur lors du chargement des données: {ex.Message}", Severity.Error);
            // Initialiser des statistiques vides en cas d'erreur
            statistics = new CreatorStatistics();
        }
        finally
        {
            loading = false;
        }
    }
    
    private CreatorStatistics CalculateStatistics(List<ModInfo> mods)
    {
        // Calculer les statistiques basées sur les mods récupérés
        int totalDownloads = mods.Sum(m => m.Downloads);
        int totalRatings = mods.Sum(m => m.RatingCount);
        double avgRating = totalRatings > 0 
            ? mods.Where(m => m.RatingCount > 0).Average(m => m.Rating) 
            : 0;
        
        // Calculer les téléchargements de ce mois (simulé)
        var thisMonth = DateTime.Now.Month;
        int monthlyDownloads = totalDownloads / 10; // Simulation
        
        // Calculer les revenus (à remplacer par de vraies données de la base Payments)
        decimal revenue = mods.Where(m => m.Price > 0).Sum(m => m.Price * m.Downloads / 20); // Simulation
        
        return new CreatorStatistics
        {
            TotalMods = mods.Count,
            ActiveMods = mods.Count(m => m.Status?.ToLower() == "published"),
            TotalDownloads = totalDownloads,
            MonthlyDownloads = monthlyDownloads,
            AverageRating = Math.Round(avgRating, 1),
            TotalRatings = totalRatings,
            MonthlyRevenue = revenue
        };
    }
    
    private List<CreatorActivity> GenerateRecentActivityFromMods(List<ModInfo> mods)
    {
        var activities = new List<CreatorActivity>();
        
        // Créer des activités basées sur les mods les plus récents et les plus téléchargés
        if (mods.Any())
        {
            // Dernier mod mis à jour
            var lastUpdatedMod = mods.OrderByDescending(m => m.UpdatedDate).FirstOrDefault();
            if (lastUpdatedMod != null)
            {
                activities.Add(new CreatorActivity
                {
                    DateTime = lastUpdatedMod.UpdatedDate,
                    Title = "Mise à jour de mod",
                    Description = $"Vous avez mis à jour votre mod '{lastUpdatedMod.Title}'",
                    Type = ActivityType.Update
                });
            }
            
            // Mod le plus téléchargé
            var mostDownloadedMod = mods.OrderByDescending(m => m.Downloads).FirstOrDefault();
            if (mostDownloadedMod != null)
            {
                activities.Add(new CreatorActivity
                {
                    DateTime = DateTime.Now.AddHours(-5),
                    Title = "Téléchargement populaire",
                    Description = $"Votre mod '{mostDownloadedMod.Title}' a {mostDownloadedMod.Downloads} téléchargements",
                    Type = ActivityType.Download
                });
            }
            
            // Mod le mieux noté
            var bestRatedMod = mods.Where(m => m.RatingCount > 0).OrderByDescending(m => m.Rating).FirstOrDefault();
            if (bestRatedMod != null)
            {
                activities.Add(new CreatorActivity
                {
                    DateTime = DateTime.Now.AddDays(-2),
                    Title = "Évaluation positive",
                    Description = $"Votre mod '{bestRatedMod.Title}' est bien noté avec {bestRatedMod.Rating:0.0}/5",
                    Type = ActivityType.Rating
                });
            }
            
            // Ajout d'une activité de paiement simulée
            if (mods.Any(m => m.Price > 0))
            {
                var premiumMod = mods.Where(m => m.Price > 0).OrderByDescending(m => m.Price).FirstOrDefault();
                if (premiumMod != null)
                {
                    activities.Add(new CreatorActivity
                    {
                        DateTime = DateTime.Now.AddDays(-3),
                        Title = "Paiement reçu",
                        Description = $"Vous avez reçu un paiement pour votre mod premium '{premiumMod.Title}'",
                        Type = ActivityType.Payment
                    });
                }
            }
        }
        
        return activities.OrderByDescending(a => a.DateTime).Take(5).ToList();
    }
    
    private Color GetActivityColor(ActivityType type)
    {
        return type switch
        {
            ActivityType.Download => Color.Info,
            ActivityType.Rating => Color.Warning,
            ActivityType.Comment => Color.Secondary,
            ActivityType.Payment => Color.Success,
            ActivityType.Update => Color.Primary,
            _ => Color.Default
        };
    }
    
    private string GetActivityIcon(ActivityType type)
    {
        return type switch
        {
            ActivityType.Download => Icons.Material.Filled.Download,
            ActivityType.Rating => Icons.Material.Filled.Star,
            ActivityType.Comment => Icons.Material.Filled.Comment,
            ActivityType.Payment => Icons.Material.Filled.Payments,
            ActivityType.Update => Icons.Material.Filled.Update,
            _ => Icons.Material.Filled.Notifications
        };
    }
    
    // Modèles locaux pour la démonstration
    public class CreatorStatistics
    {
        public int TotalMods { get; set; }
        public int ActiveMods { get; set; }
        public int TotalDownloads { get; set; }
        public int MonthlyDownloads { get; set; }
        public double AverageRating { get; set; }
        public int TotalRatings { get; set; }
        public decimal MonthlyRevenue { get; set; }
    }
    
    public class CreatorActivity
    {
        public DateTime DateTime { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public ActivityType Type { get; set; }
    }
    
    public enum ActivityType
    {
        Download,
        Rating,
        Comment,
        Payment,
        Update
    }
    
    public class PopularMod
    {
        public string Id { get; set; }
        public string Title { get; set; }
        public int DownloadsCount { get; set; }
        public int Rating { get; set; }
    }
}
