@page "/mods"
@page "/mods-hub"
@using Frontend.Models
@using Frontend.Services
@using System.Threading
@using System
@implements IDisposable
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IModService ModService
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime

<PageTitle>Hub des Mods - ModHub</PageTitle>

<style>
    .mods-hub-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        padding-top: 20px;
    }
    
    .hero-section {
        background: linear-gradient(135deg, rgba(102, 126, 234, 0.9), rgba(118, 75, 162, 0.9));
        border-radius: 20px;
        padding: 40px;
        margin-bottom: 30px;
        text-align: center;
        backdrop-filter: blur(10px);
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
    }
    
    .hero-title {
        font-size: 3rem;
        font-weight: 700;
        background: linear-gradient(45deg, #fff, #f0f0f0);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 15px;
    }
    
    .hero-subtitle {
        color: rgba(255,255,255,0.9);
        font-size: 1.2rem;
        margin-bottom: 30px;
    }
    
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 20px;
        margin-top: 30px;
    }
    
    .stat-card {
        background: rgba(255,255,255,0.1);
        border-radius: 15px;
        padding: 20px;
        text-align: center;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255,255,255,0.2);
    }
    
    .stat-number {
        font-size: 2rem;
        font-weight: bold;
        color: white;
        display: block;
    }
    
    .stat-label {
        color: rgba(255,255,255,0.8);
        font-size: 0.9rem;
        margin-top: 5px;
    }
    
    .mod-card-enhanced {
        background: rgba(255,255,255,0.95);
        border-radius: 20px;
        overflow: hidden;
        transition: all 0.3s ease;
        border: 1px solid rgba(255,255,255,0.2);
        backdrop-filter: blur(10px);
        margin-bottom: 20px;
    }
    
    .mod-card-enhanced:hover {
        transform: translateY(-5px);
        box-shadow: 0 20px 40px rgba(0,0,0,0.15);
    }
    
    .mod-thumbnail {
        width: 100%;
        height: 200px;
        object-fit: cover;
        background: linear-gradient(45deg, #f0f2f5, #e9ecef);
    }
    
    .mod-content {
        padding: 20px;
    }
    
    .mod-title {
        font-size: 1.3rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 10px;
        line-height: 1.3;
    }
    
    .mod-author {
        color: #6c757d;
        font-size: 0.9rem;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        gap: 5px;
    }
    
    .mod-description {
        color: #495057;
        font-size: 0.95rem;
        line-height: 1.5;
        margin-bottom: 15px;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
    
    .mod-stats {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        flex-wrap: wrap;
        gap: 10px;
    }
    
    .stat-item {
        display: flex;
        align-items: center;
        gap: 5px;
        font-size: 0.85rem;
        color: #6c757d;
    }
    
    .rating-stars {
        color: #ffc107;
        font-size: 1rem;
    }
    
    .mod-actions {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }
    
    .download-btn {
        background: linear-gradient(45deg, #28a745, #20c997);
        border: none;
        color: white;
        font-weight: 600;
        border-radius: 25px;
        padding: 10px 20px;
        transition: all 0.3s ease;
        flex: 1;
    }
    
    .download-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(40, 167, 69, 0.4);
    }
    
    .rate-btn {
        background: linear-gradient(45deg, #ffc107, #fd7e14);
        border: none;
        color: white;
        font-weight: 600;
        border-radius: 25px;
        padding: 10px 15px;
        transition: all 0.3s ease;
    }
    
    .rate-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(255, 193, 7, 0.4);
    }
    
    .view-details-btn {
        background: linear-gradient(45deg, #6f42c1, #e83e8c);
        border: none;
        color: white;
        font-weight: 600;
        border-radius: 25px;
        padding: 10px 15px;
        transition: all 0.3s ease;
    }
    
    .view-details-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(111, 66, 193, 0.4);
    }
    
    .filters-section {
        background: rgba(255,255,255,0.95);
        border-radius: 20px;
        padding: 25px;
        margin-bottom: 30px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255,255,255,0.2);
    }
    
    .search-input {
        border-radius: 25px;
        border: 2px solid #e9ecef;
        padding: 12px 20px;
        font-size: 1rem;
        transition: all 0.3s ease;
    }
    
    .search-input:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }
    
    .premium-badge {
        background: linear-gradient(45deg, #fd7e14, #ffc107);
        color: white;
        font-size: 0.75rem;
        font-weight: 600;
        padding: 4px 8px;
        border-radius: 10px;
        position: absolute;
        top: 10px;
        right: 10px;
    }
    
    .new-badge {
        background: linear-gradient(45deg, #dc3545, #e83e8c);
        color: white;
        font-size: 0.75rem;
        font-weight: 600;
        padding: 4px 8px;
        border-radius: 10px;
        position: absolute;
        top: 10px;
        left: 10px;
    }
    
    .loading-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 200px;
    }
    
    .no-mods-message {
        text-align: center;
        padding: 60px 20px;
        background: rgba(255,255,255,0.95);
        border-radius: 20px;
        backdrop-filter: blur(10px);
    }
    
    .pagination-container {
        display: flex;
        justify-content: center;
        margin-top: 40px;
    }
    
    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .animate-fade-in {
        animation: fadeInUp 0.6s ease-out;
    }
</style>

<div class="mods-hub-container">
    <MudContainer MaxWidth="MaxWidth.ExtraLarge">
        <!-- Section Hero -->
        <div class="hero-section animate-fade-in">
            <h1 class="hero-title">Hub des Mods</h1>
            <p class="hero-subtitle">
                Découvrez, téléchargez et évaluez les meilleurs mods pour vos jeux préférés
            </p>
            
            <div class="stats-grid">
                <div class="stat-card">
                    <span class="stat-number">@totalMods</span>
                    <div class="stat-label">Mods disponibles</div>
                </div>
                <div class="stat-card">
                    <span class="stat-number">@totalDownloads.ToString("N0")</span>
                    <div class="stat-label">Téléchargements</div>
                </div>
                <div class="stat-card">
                    <span class="stat-number">@activeCreators</span>
                    <div class="stat-label">Créateurs actifs</div>
                </div>
                <div class="stat-card">
                    <span class="stat-number">@supportedGames</span>
                    <div class="stat-label">Jeux supportés</div>
                </div>
            </div>
        </div>
        
        <!-- Section Filtres -->
        <div class="filters-section animate-fade-in">
            <MudGrid AlignItems="Center">
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="searchTerm"
                                  Placeholder="Rechercher des mods..."
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Class="search-input"
                                  Immediate="true"
                                  OnKeyUp="OnSearchKeyUp" />
                </MudItem>
                <MudItem xs="12" md="3">
                    <MudSelect T="string" @bind-Value="selectedCategory"
                               Label="Catégorie"
                               Variant="Variant.Outlined"
                               AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="@("")">Toutes les catégories</MudSelectItem>
                        <MudSelectItem Value="@("graphics")">Graphiques</MudSelectItem>
                        <MudSelectItem Value="@("gameplay")">Gameplay</MudSelectItem>
                        <MudSelectItem Value="@("audio")">Audio</MudSelectItem>
                        <MudSelectItem Value="@("ui")">Interface</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="3">
                    <MudSelect T="string" @bind-Value="sortBy"
                               Label="Trier par"
                               Variant="Variant.Outlined"
                               AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="@("recent")">Plus récents</MudSelectItem>
                        <MudSelectItem Value="@("popular")">Plus populaires</MudSelectItem>
                        <MudSelectItem Value="@("rating")">Mieux notés</MudSelectItem>
                        <MudSelectItem Value="@("downloads")">Plus téléchargés</MudSelectItem>
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </div>
        
        <!-- Liste des Mods -->
        @if (isLoading)
        {
            <div class="loading-container">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            </div>
        }
        else if (mods == null || !mods.Any())
        {
            <div class="no-mods-message animate-fade-in">
                <MudIcon Icon="@Icons.Material.Filled.SearchOff" Size="Size.Large" Color="Color.Default" />
                <MudText Typo="Typo.h6" Class="mt-4 mb-2">Aucun mod trouvé</MudText>
                <MudText Typo="Typo.body1" Color="Color.Default">
                    Essayez de modifier vos critères de recherche ou de navigation.
                </MudText>
            </div>
        }
        else
        {
            <MudGrid>
                @foreach (var mod in mods)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3" Class="animate-fade-in">
                        <div class="mod-card-enhanced">
                            <div style="position: relative;">
                                @if (mod.IsFeatured)
                                {
                                    <div class="premium-badge">PREMIUM</div>
                                }
                                @if (mod.IsNew)
                                {
                                    <div class="new-badge">NOUVEAU</div>
                                }
                                <img src="@GetModThumbnail(mod.ThumbnailUrl)"
                                     alt="@mod.Name"
                                     class="mod-thumbnail"
                                     @onerror="@((e) => HandleImageError(e))" />
                            </div>
                            
                            <div class="mod-content">
                                <div class="mod-title">@mod.Name</div>
                                <div class="mod-author">
                                    <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" />
                                    @mod.CreatorName
                                </div>
                                <div class="mod-description">@mod.ShortDescription</div>
                                
                                <div class="mod-stats">
                                    <div class="stat-item">
                                        <MudIcon Icon="@Icons.Material.Filled.Download" Size="Size.Small" />
                                        @mod.DownloadCount.ToString("N0")
                                    </div>
                                    <div class="stat-item">
                                        <div class="rating-stars">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                <MudIcon Icon="@(i <= Math.Round(mod.AverageRating) ? Icons.Material.Filled.Star : Icons.Material.Outlined.Star)"
                                                         Size="Size.Small" />
                                            }
                                        </div>
                                        <span>(@mod.RatingCount)</span>
                                    </div>
                                </div>
                                
                                <div class="mod-actions">
                                    <MudButton Class="download-btn"
                                               StartIcon="@Icons.Material.Filled.Download"
                                               OnClick="@(() => DownloadMod(mod.Id, mod.Name))"
                                               Disabled="@isDownloading">
                                        Télécharger
                                    </MudButton>
                                    
                                    <MudButton Class="rate-btn"
                                               StartIcon="@Icons.Material.Filled.Star"
                                               OnClick="@(() => OpenRatingDialog(mod))">
                                        Noter
                                    </MudButton>
                                    
                                    <MudButton Class="view-details-btn"
                                               StartIcon="@Icons.Material.Filled.Visibility"
                                               OnClick="@(() => ViewModDetails(mod.Id))">
                                        Détails
                                    </MudButton>
                                </div>
                            </div>
                        </div>
                    </MudItem>
                }
            </MudGrid>
            
            <!-- Pagination -->
            @if (totalPages > 1)
            {
                <div class="pagination-container">
                    <MudPagination Count="totalPages"
                                   Selected="currentPage"
                                   SelectedChanged="OnPageChanged"
                                   Color="Color.Primary"
                                   Size="Size.Large"
                                   ShowFirstButton="true"
                                   ShowLastButton="true" />
                </div>
            }
        }
    </MudContainer>
</div>

@code {
    // Variables d'état
    private bool isLoading = false;
    private bool isDownloading = false;
    private List<ModDto> mods = new();
    private string searchTerm = "";
    private string selectedCategory = "";
    private string sortBy = "recent";
    private int currentPage = 1;
    private int pageSize = 12;
    private int totalPages = 1;
    
    // Statistiques du hub
    private int totalMods = 0;
    private long totalDownloads = 0;
    private int activeCreators = 0;
    private int supportedGames = 0;
    
    // Timer pour la recherche
    private Timer? searchTimer;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadMods();
        await LoadStatistics();
    }
    
    private async Task LoadMods()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            var response = await ModService.GetModsAsync(
                currentPage, 
                pageSize, 
                searchTerm, 
                selectedCategory, 
                sortBy
            );
            
            if (response.Success && response.Data != null)
            {
                mods = response.Data.Items.ToList();
                totalPages = (int)Math.Ceiling((double)response.Data.TotalCount / pageSize);
                totalMods = response.Data.TotalCount;
            }
            else
            {
                mods = new List<ModDto>();
                Snackbar.Add(response.Message ?? "Erreur lors du chargement des mods", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur: {ex.Message}", Severity.Error);
            mods = new List<ModDto>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task LoadStatistics()
    {
        try
        {
            // Ces valeurs devraient venir d'une API dédiée aux statistiques
            totalDownloads = mods.Sum(m => m.DownloadCount);
            activeCreators = mods.Select(m => m.CreatorId).Distinct().Count();
            supportedGames = mods.Select(m => m.GameId).Distinct().Count();
        }
        catch (Exception ex)
        {
            // Statistiques par défaut en cas d'erreur
            totalDownloads = 0;
            activeCreators = 0;
            supportedGames = 0;
        }
    }
    
    private async Task OnSearchKeyUp(KeyboardEventArgs e)
    {
        searchTimer?.Dispose();
        searchTimer = new Timer(async _ =>
        {
            currentPage = 1;
            await InvokeAsync(async () =>
            {
                await LoadMods();
                StateHasChanged();
            });
        }, null, 500, Timeout.Infinite);
    }
    
    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadMods();
    }
    
    private async Task DownloadMod(string modId, string modName)
    {
        if (isDownloading) return;
        
        isDownloading = true;
        StateHasChanged();
        
        try
        {
            var response = await ModService.DownloadModAsync(modId);
            
            if (response.Success && !string.IsNullOrEmpty(response.Data))
            {
                // Ouvrir le lien de téléchargement dans un nouvel onglet
                await JSRuntime.InvokeVoidAsync("open", response.Data, "_blank");
                Snackbar.Add($"Téléchargement de {modName} démarré !", Severity.Success);
            }
            else
            {
                Snackbar.Add(response.Message ?? "Erreur lors du téléchargement", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur de téléchargement: {ex.Message}", Severity.Error);
        }
        finally
        {
            isDownloading = false;
            StateHasChanged();
        }
    }
    
    private async Task OpenRatingDialog(ModDto mod)
    {
        var parameters = new DialogParameters<RatingDialog>
        {
            { x => x.ModId, mod.Id },
            { x => x.ModName, mod.Name },
            { x => x.CurrentRating, mod.AverageRating },
            { x => x.RatingCount, mod.RatingCount }
        };
        
        var dialog = await DialogService.ShowAsync<RatingDialog>("Noter ce mod", parameters);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            // Recharger les mods pour mettre à jour les ratings
            await LoadMods();
        }
    }
    
    private void ViewModDetails(string modId)
    {
        NavigationManager.NavigateTo($"/mod/{modId}");
    }
    
    private string GetModThumbnail(string? thumbnailUrl)
    {
        return string.IsNullOrWhiteSpace(thumbnailUrl) 
            ? "/images/mod-placeholder.png" 
            : thumbnailUrl;
    }
    
    private void HandleImageError(ErrorEventArgs e)
    {
        // Cette méthode sera appelée si l'image ne peut pas être chargée
        // On pourrait remplacer par une image par défaut via JavaScript
    }
    
    public void Dispose()
    {
        searchTimer?.Dispose();
    }
}
