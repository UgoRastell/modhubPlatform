@page "/mods"
@page "/mods-hub"
@using Frontend.Models
@using Frontend.Services
@using System.Threading
@using System
@implements IDisposable
@using Microsoft.AspNetCore.Components.Authorization
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IModService ModService
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider
@inject IUserService UserService

<PageTitle>Hub des Mods - ModHub</PageTitle>

<style>
    /* Styles uniformisés pour être cohérents avec Revenue.razor et NavMenu.razor */
    .mod-card {
        transition: all 0.3s ease;
        height: 100%;
    }
    
    .mod-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 24px rgba(0,0,0,0.12);
    }
    
    .mod-img {
        height: 180px;
        object-fit: cover;
        width: 100%;
    }
    
    .stat-box {
        text-align: center;
        padding: 16px;
        border-radius: 8px;
        background-color: var(--mud-palette-surface);
    }
    
    .mod-description {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        margin-bottom: 12px;
    }
    
    /* Styles pour filtres et recherche */
    .filter-section {
        margin-bottom: 24px;
    }
    
    .search-field .mud-input {
        border-radius: 4px;
    }
    
    /* Animation pour le chargement */
    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
    
    .fade-in {
        animation: fadeIn 0.3s ease-in;
    }
    
    /* Badges et indicateurs */
    .mod-badge {
        margin-right: 4px;
    }
    
    /* Pagination */
    .pagination-container {
        display: flex;
        justify-content: center;
        margin: 24px 0;
    }
    
    /* Responsive adjustments */
    @@media (max-width: 600px) {
        .search-filters {
            flex-direction: column;
        }
        
        .filter-item {
            width: 100%;
            margin-bottom: 8px;
        }
    }
    
    .mod-title {
        font-size: 1.3rem;
        font-weight: 600;
        color: var(--text-on-dark);
        margin-bottom: 10px;
        line-height: 1.3;
    }
    
    .mod-author {
        color: var(--text-on-dark);
        font-size: 0.9rem;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
        gap: 5px;
    }
    
    .mod-description {
        color: var(--text-on-dark);
        font-size: 0.95rem;
        line-height: 1.5;
        margin-bottom: 15px;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
    
    .mod-stats {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        flex-wrap: wrap;
        gap: 10px;
    }
    
    .stat-item {
        display: flex;
        align-items: center;
        gap: 5px;
        font-size: 0.85rem;
        color: var(--text-on-dark);
    }
    
    .rating-stars {
        color: #ffc107 !important;
        color: #ffc107;
        font-size: 1rem;
    }
    
    .mod-actions {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }
    
    .download-btn {
        background: linear-gradient(45deg, #28a745, #20c997);
        border: none;
        color: white;
        font-weight: 600;
        border-radius: 25px;
        padding: 10px 20px;
        transition: all 0.3s ease;
        flex: 1;
    }
    
    .download-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(40, 167, 69, 0.4);
    }
    
    .rate-btn {
        background: linear-gradient(45deg, #ffc107, #fd7e14);
        border: none;
        color: white;
        font-weight: 600;
        border-radius: 25px;
        padding: 10px 15px;
        transition: all 0.3s ease;
    }
    
    .rate-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(255, 193, 7, 0.4);
    }
    
    .view-details-btn {
        background: linear-gradient(45deg, #6f42c1, #e83e8c);
        border: none;
        color: white;
        font-weight: 600;
        border-radius: 25px;
        padding: 10px 15px;
        transition: all 0.3s ease;
    }
    
    .view-details-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(111, 66, 193, 0.4);
    }
    
    .filters-section {
        background: rgba(255,255,255,0.95);
        border-radius: 20px;
        padding: 25px;
        margin-bottom: 30px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255,255,255,0.2);
    }
    
    .search-input {
        border-radius: 25px;
        border: 2px solid #e9ecef;
        padding: 12px 20px;
        font-size: 1rem;
        transition: all 0.3s ease;
    }
    
    .search-input:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }
    
    .premium-badge {
        background: linear-gradient(45deg, #fd7e14, #ffc107);
        color: white;
        font-size: 0.75rem;
        font-weight: 600;
        padding: 4px 8px;
        border-radius: 10px;
        position: absolute;
        top: 10px;
        right: 10px;
    }
    
    .new-badge {
        background: linear-gradient(45deg, #dc3545, #e83e8c);
        color: white;
        font-size: 0.75rem;
        font-weight: 600;
        padding: 4px 8px;
        border-radius: 10px;
        position: absolute;
        top: 10px;
        left: 10px;
    }
    
    .loading-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 200px;
    }
    
    .no-mods-message {
        text-align: center;
        padding: 60px 20px;
        background: rgba(255,255,255,0.95);
        border-radius: 20px;
        backdrop-filter: blur(10px);
    }
    
    .pagination-container {
        display: flex;
        justify-content: center;
        margin-top: 40px;
    }
    
    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .animate-fade-in {
        animation: fadeInUp 0.6s ease-out;
    }
</style>

<div class="mods-hub-container surface-dark">
    <MudContainer MaxWidth="MaxWidth.ExtraLarge">
        <!-- Section Hero -->
        <MudPaper Elevation="0" Class="pa-6 mb-4 rounded-lg" Style="background: var(--mud-palette-primary-darken)">
            <MudText Typo="Typo.h3" Color="Color.Surface" Align="Align.Center" Class="mb-4 fw-bold">Hub des Mods</MudText>
            <MudText Typo="Typo.body1" Color="Color.Surface" Align="Align.Center" Class="mb-6">
                Découvrez, téléchargez et évaluez les meilleurs mods pour vos jeux préférés
            </MudText>
            
            <MudGrid Class="mt-6" Justify="Justify.Center">
                <MudItem xs="6" sm="3">
                    <MudPaper Elevation="0" Class="pa-4 text-center" Style="background-color: rgba(255,255,255,0.1); backdrop-filter: blur(10px);">
                        <MudText Typo="Typo.h4" Color="Color.Surface">@totalMods</MudText>
                        <MudText Typo="Typo.caption" Color="Color.Surface">Mods disponibles</MudText>
                    </MudPaper>
                </MudItem>
                <MudItem xs="6" sm="3">
                    <MudPaper Elevation="0" Class="pa-4 text-center" Style="background-color: rgba(255,255,255,0.1); backdrop-filter: blur(10px);">
                        <MudText Typo="Typo.h4" Color="Color.Surface">@totalDownloads.ToString("N0")</MudText>
                        <MudText Typo="Typo.caption" Color="Color.Surface">Téléchargements</MudText>
                    </MudPaper>
                </MudItem>
                <MudItem xs="6" sm="3">
                    <MudPaper Elevation="0" Class="pa-4 text-center" Style="background-color: rgba(255,255,255,0.1); backdrop-filter: blur(10px);">
                        <MudText Typo="Typo.h4" Color="Color.Surface">@activeCreators</MudText>
                        <MudText Typo="Typo.caption" Color="Color.Surface">Créateurs actifs</MudText>
                    </MudPaper>
                </MudItem>
                <MudItem xs="6" sm="3">
                    <MudPaper Elevation="0" Class="pa-4 text-center" Style="background-color: rgba(255,255,255,0.1); backdrop-filter: blur(10px);">
                        <MudText Typo="Typo.h4" Color="Color.Surface">@supportedGames</MudText>
                        <MudText Typo="Typo.caption" Color="Color.Surface">Jeux supportés</MudText>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudPaper>
        
        <!-- Section Filtres -->
        <MudPaper Elevation="2" Class="pa-4 mb-6 rounded-lg">
            <MudText Typo="Typo.h6" Class="mb-4">Filtres de recherche</MudText>
            <MudGrid AlignItems="AlignItems.Center">
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="searchTerm"
                                  Placeholder="Rechercher des mods..."
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Class="mud-width-full"
                                  Immediate="true"
                                  OnKeyUp="OnSearchKeyUp" />
                </MudItem>
                <MudItem xs="12" md="3">
                    <MudSelect T="string" @bind-Value="selectedCategory"
                               Label="Catégorie"
                               Variant="Variant.Outlined"
                               FullWidth="true"
                               AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="@("")">Toutes les catégories</MudSelectItem>
                        <MudSelectItem Value="@("graphics")">Graphiques</MudSelectItem>
                        <MudSelectItem Value="@("gameplay")">Gameplay</MudSelectItem>
                        <MudSelectItem Value="@("audio")">Audio</MudSelectItem>
                        <MudSelectItem Value="@("ui")">Interface</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="3">
                    <MudSelect T="string" @bind-Value="sortBy"
                               Label="Trier par"
                               Variant="Variant.Outlined"
                               FullWidth="true"
                               AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="@("recent")">Plus récents</MudSelectItem>
                        <MudSelectItem Value="@("popular")">Plus populaires</MudSelectItem>
                        <MudSelectItem Value="@("rating")">Mieux notés</MudSelectItem>
                        <MudSelectItem Value="@("downloads")">Plus téléchargés</MudSelectItem>
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </MudPaper>
        
        <!-- Liste des Mods -->
        @if (isLoading)
        {
            <MudPaper Elevation="0" Class="py-8">
                <div class="d-flex flex-column align-center justify-center">
                    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                    <MudText Typo="Typo.body1" Class="mt-4" Color="Color.Primary">Chargement des mods...</MudText>
                </div>
            </MudPaper>
        }
        else if (mods == null || !mods.Any())
        {
            <MudPaper Elevation="0" Class="pa-8 d-flex flex-column align-center justify-center" Style="min-height: 240px">
                <MudIcon Icon="@Icons.Material.Filled.SearchOff" Size="Size.Large" Color="Color.Error" Class="mb-4" />
                <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-2">Aucun mod trouvé</MudText>
                <MudText Typo="Typo.body1" Align="Align.Center" Color="Color.Secondary">
                    Essayez de modifier vos critères de recherche ou de sélectionner une autre catégorie.
                </MudText>
                <MudButton Class="mt-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => ResetFilters())">
                    <MudIcon Icon="@Icons.Material.Filled.RestartAlt" Class="mr-2" Size="Size.Small" /> Réinitialiser les filtres
                </MudButton>
            </MudPaper>
        }
        else
        {
            <MudGrid>
                @foreach (var mod in mods)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3" Class="animate-fade-in">
                        <MudCard Elevation="3" Class="mud-height-full">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6" Class="mud-text-nowrap-ellipsis">@mod.Name</MudText>
                                    <MudText Typo="Typo.caption" Class="d-flex align-center gap-1">
                                        <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" /> @(!string.IsNullOrWhiteSpace(mod.CreatorName) ? mod.CreatorName : (!string.IsNullOrWhiteSpace(mod.Author) ? mod.Author : "Créateur inconnu"))
                                    </MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Dense="true" Direction="Direction.Left" OffsetX="true">
                                        <MudMenuItem Icon="@Icons.Material.Filled.Visibility" OnClick="@(() => ViewModDetails(mod.Id))">Détails</MudMenuItem>
                                        <MudMenuItem Icon="@Icons.Material.Filled.Report">Signaler</MudMenuItem>
                                    </MudMenu>
                                </CardHeaderActions>
                            </MudCardHeader>
                            
                            <div style="position: relative;">
                                <MudCardMedia Image="@GetModThumbnail(mod)" 
                                              Height="180" 
                                              loading="lazy"
                                              alt="@GetImageAltText(mod)"
                                              title="@mod.Name"
                                              @onerror="@((e) => HandleImageError(e, mod.Id))" 
                                              Style="object-fit: cover; background-color: #f8f9fa;" />
                                @if (mod.IsFeatured)
                                {
                                    <MudChip T="string" Color="Color.Success" Size="Size.Small" Label="true"
                                            Style="position: absolute; top: 8px; right: 8px;">
                                        PREMIUM
                                    </MudChip>
                                }
                                @if (mod.IsNew)
                                {
                                    <MudChip T="string" Color="Color.Info" Size="Size.Small" Label="true"
                                            Style="position: absolute; top: 8px; left: 8px;">
                                        NOUVEAU
                                    </MudChip>
                                }
                            </div>
                            
                            <MudCardContent>
                                <MudText Typo="Typo.body2" Class="mud-text-secondary mud-text-nowrap-ellipsis" 
                                          Style="max-height: 50px; overflow: hidden;">
                                    @mod.ShortDescription
                                </MudText>
                                
                                <MudDivider Class="my-2" />
                                
                                <div class="d-flex justify-space-between align-center">
                                    <div class="d-flex align-center gap-2">
                                        <MudTooltip Text="Téléchargements">
                                            <div class="d-flex align-center gap-1">
                                                <MudIcon Icon="@Icons.Material.Filled.Download" Size="Size.Small" />
                                                <MudText Typo="Typo.caption">@mod.DownloadCount.ToString("N0")</MudText>
                                            </div>
                                        </MudTooltip>
                                    </div>
                                    <div class="d-flex align-center gap-1">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            <MudIcon Icon="@(i <= Math.Floor(mod.AverageRating + 0.001) ? Icons.Material.Filled.Star : Icons.Material.Outlined.Star)"
                                                     Size="Size.Small" Color="Color.Warning" />
                                        }
                                        <MudText Typo="Typo.caption" Class="ml-1">(@mod.RatingCount)</MudText>
                                    </div>
                                </div>
                            </MudCardContent>
                            
                            <MudCardActions Class="d-flex justify-space-between flex-wrap">
                                <MudButton Variant="Variant.Filled" 
                                           Color="Color.Primary" 
                                           StartIcon="@Icons.Material.Filled.Download"
                                           Size="Size.Small"
                                           FullWidth="false"
                                           Disabled="@isDownloading"
                                           OnClick="@(() => DownloadMod(mod.Id, mod.Name))">
                                    Télécharger
                                </MudButton>
                                
                                <div>
                                    <MudIconButton Icon="@Icons.Material.Filled.Star"
                                                  Color="Color.Secondary"
                                                  Size="Size.Small"
                                                  OnClick="@(() => OpenRatingDialog(mod))"
                                                  Title="Noter" />
                                    
                                    <MudIconButton Icon="@Icons.Material.Filled.Visibility"
                                                  Color="Color.Default"
                                                  Size="Size.Small"
                                                  OnClick="@(() => ViewModDetails(mod.Id))"
                                                  Title="Détails" />
                                </div>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
            
            <!-- Pagination -->
            @if (totalPages > 1)
            {
                <MudPaper Elevation="0" Class="d-flex justify-center mt-6 pa-4">
                    <MudPagination Variant="Variant.Outlined"
                                   Count="totalPages"
                                   Selected="currentPage"
                                   SelectedChanged="OnPageChanged"
                                   Color="Color.Primary"
                                   Size="Size.Medium"
                                   ShowFirstButton="true"
                                   ShowLastButton="true"
                                   Class="mud-text-align-center" />
                </MudPaper>
            }
        }
    </MudContainer>
</div>

@code {
    // Variables d'état
    private bool isLoading = false;
    private bool isDownloading = false;
    private List<ModDto> mods = new();
    private string searchTerm = "";
    private string selectedCategory = "";
    private string sortBy = "recent";
    private int currentPage = 1;
    private int pageSize = 12;
    private int totalPages = 1;
    
    // Statistiques du hub
    private int totalMods = 0;
    private long totalDownloads = 0;
    private int activeCreators = 0;
    private int supportedGames = 0;
    
    // Cache pour stocker les noms de créateurs déjà récupérés
    private readonly Dictionary<string, string?> creatorNameCache = new();
    
    // Timer pour la recherche
    private Timer? searchTimer;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadMods();
        await LoadStatistics();
    }
    
    private async Task LoadMods()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            var response = await ModService.GetModsAsync(
                currentPage, 
                pageSize, 
                searchTerm, 
                selectedCategory, 
                sortBy
            );
            
            if (response.Success && response.Data != null)
            {
                mods = response.Data.Items.ToList();
                // Enrichit les mods avec les noms de créateurs manquants
                await PopulateCreatorNamesAsync(mods);
                
                totalPages = (int)Math.Ceiling((double)response.Data.TotalCount / pageSize);
                totalMods = response.Data.TotalCount;
            }
            else
            {
                mods = new List<ModDto>();
                Snackbar.Add(response.Message ?? "Erreur lors du chargement des mods", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur: {ex.Message}", Severity.Error);
            mods = new List<ModDto>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task LoadStatistics()
    {
        try
        {
            // Ces valeurs devraient venir d'une API dédiée aux statistiques
            totalDownloads = mods.Sum(m => m.DownloadCount);
            activeCreators = mods.Select(m => m.CreatorId).Distinct().Count();
            supportedGames = mods.Select(m => m.GameId).Distinct().Count();
        }
        catch (Exception ex)
        {
            // Statistiques par défaut en cas d'erreur
            totalDownloads = 0;
            activeCreators = 0;
            supportedGames = 0;
        }
    }
    
    /// <summary>
    /// Récupère et met en cache les noms d'utilisateurs des créateurs pour les mods affichés.
    /// </summary>
    private async Task PopulateCreatorNamesAsync(List<ModDto> modList)
    {
        // Identifie les IDs de créateurs à récupérer (manquants ou non en cache)
        var idsToFetch = modList
            .Where(m => string.IsNullOrWhiteSpace(m.CreatorName) && !string.IsNullOrWhiteSpace(m.CreatorId))
            .Select(m => m.CreatorId)
            .Distinct()
            .Where(id => !creatorNameCache.ContainsKey(id))
            .ToList();

        // Appels API parallèles pour réduire la latence
        var fetchTasks = idsToFetch.Select(async id =>
        {
            var resp = await UserService.GetUserProfileAsync(id);
            if (resp.Success && resp.Data != null && !string.IsNullOrWhiteSpace(resp.Data.Username))
            {
                creatorNameCache[id] = resp.Data.Username;
            }
            else
            {
                creatorNameCache[id] = string.Empty;
            }
        });

        await Task.WhenAll(fetchTasks);

        // Attribue les noms aux mods
        foreach (var mod in modList)
        {
            if (!string.IsNullOrWhiteSpace(mod.CreatorId) &&
                creatorNameCache.TryGetValue(mod.CreatorId, out var username) &&
                !string.IsNullOrWhiteSpace(username))
            {
                mod.CreatorName = username!;
            }
        }
    }

    private async Task OnSearchKeyUp(KeyboardEventArgs e)
    {
        searchTimer?.Dispose();
        searchTimer = new Timer(async _ =>
        {
            currentPage = 1;
            await InvokeAsync(async () =>
            {
                await LoadMods();
                StateHasChanged();
            });
        }, null, 500, Timeout.Infinite);
    }
    
    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadMods();
    }
    
    private async Task DownloadMod(string modId, string modName)
    {
        if (isDownloading) return;
        
        isDownloading = true;
        StateHasChanged();
        
        try
        {
            var response = await ModService.DownloadModAsync(modId);
            
            if (response.Success && !string.IsNullOrEmpty(response.Data))
            {
                // Ouvrir le lien de téléchargement dans un nouvel onglet
                await JSRuntime.InvokeVoidAsync("open", response.Data, "_blank");
                Snackbar.Add($"Téléchargement de {modName} démarré !", Severity.Success);
            }
            else
            {
                Snackbar.Add(response.Message ?? "Erreur lors du téléchargement", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur de téléchargement: {ex.Message}", Severity.Error);
        }
        finally
        {
            isDownloading = false;
            StateHasChanged();
        }
    }
    
    private async Task OpenRatingDialog(ModDto mod)
    {
        // Vérifier si l'utilisateur est authentifié avant d'autoriser la notation
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState?.User?.Identity == null || !authState.User.Identity.IsAuthenticated)
        {
            Snackbar.Add("Vous devez être connecté pour noter un mod.", Severity.Warning);
            NavigationManager.NavigateTo("/login");
            return;
        }

        var parameters = new DialogParameters<RatingDialog>
        {
            { x => x.ModId, mod.Id },
            { x => x.ModName, mod.Name },
            { x => x.CurrentRating, mod.AverageRating },
            { x => x.RatingCount, mod.RatingCount }
        };
        
        var dialog = await DialogService.ShowAsync<RatingDialog>("Noter ce mod", parameters);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            // Recharger les mods pour mettre à jour les ratings
            await LoadMods();
        }
    }
    
    private void ViewModDetails(string modId)
    {
        NavigationManager.NavigateTo($"/mod/{modId}");
    }
    
    /// <summary>
    /// Génère l'URL de la miniature du mod via ModsService API
    /// </summary>
    private string GetModThumbnail(ModDto mod)
    {
        if (mod == null || string.IsNullOrWhiteSpace(mod.Id))
        {
            return "/images/mod-placeholder.png";
        }
        
        // Utilise l'URL fournie par l'API si disponible ;
        // Si l'URL est absolue on la retourne telle quelle, sinon on la résout relativement
        if (!string.IsNullOrWhiteSpace(mod.ThumbnailUrl))
        {
            // Absolue (http/https) -> on renvoie tel quel
            if (Uri.IsWellFormedUriString(mod.ThumbnailUrl, UriKind.Absolute))
            {
                return mod.ThumbnailUrl;
            }
            // Relative -> on préfixe avec le domaine courant (NavigationManager.BaseUri)
            return $"{NavigationManager.BaseUri.TrimEnd('/')}{mod.ThumbnailUrl}";
        }

        // Fallback placeholder si aucune miniature disponible
        return "/images/mod-placeholder.png";
    }
    
    /// <summary>
    /// Génère un texte alternatif approprié pour l'accessibilité des images de mods
    /// </summary>
    private string GetImageAltText(ModDto mod)
    {
        if (mod == null) return "Image de mod";
        
        var altText = $"Miniature du mod {mod.Name}";
        
        if (!string.IsNullOrEmpty(mod.CreatorName))
        {
            altText += $" par {mod.CreatorName}";
        }
        
        if (!string.IsNullOrEmpty(mod.GameName))
        {
            altText += $" pour {mod.GameName}";
        }
        
        return altText;
    }
    
    /// <summary>
    /// Gestion d'erreur de chargement d'image avec diagnostic et fallback automatique
    /// </summary>
    private void HandleImageError(ErrorEventArgs e, string modId)
    {
        try
        {
            // Diagnostic détaillé pour le debugging
            Console.WriteLine($"ModsHub: Erreur de chargement d'image pour le mod {modId}");
            Console.WriteLine($"ModsHub: Type d'erreur: {e?.Type}");
            
            // Marquer ce mod comme ayant une image défaillante pour éviter les rechargements
            if (!string.IsNullOrEmpty(modId))
            {
                // Optionnel: maintenir une liste des mods avec des images défaillantes
                // pour éviter les tentatives répétées et améliorer les performances
                Console.WriteLine($"ModsHub: Image défaillante marquée pour le mod {modId}");
            }
            
            // Log des métriques pour le monitoring (en production, utiliser un logger approprié)
            Console.WriteLine("ModsHub: Statistique - Échec de chargement d'image enregistré");
        }
        catch (Exception ex)
        {
            // Sécurité : ne jamais planter sur une erreur de gestion d'erreur
            Console.WriteLine($"ModsHub: Erreur dans la gestion d'erreur d'image: {ex.Message}");
        }
        finally
        {
            // Toujours rafraîchir l'état pour garantir la cohérence de l'UI
            StateHasChanged();
        }
    }
    
    private async Task ResetFilters()
    {
        // Réinitialiser tous les filtres
        searchTerm = "";
        selectedCategory = "";
        sortBy = "recent";
        currentPage = 1;
        
        // Recharger les mods avec les filtres réinitialisés
        await LoadMods();
        
        // Feedback utilisateur
        Snackbar.Add("Filtres réinitialisés", Severity.Info);
    }
    
    public void Dispose()
    {
        searchTimer?.Dispose();
    }
}
