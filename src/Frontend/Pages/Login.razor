@page "/login"
@using Frontend.Models
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Connexion - ModsGamingPlatform</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-8 py-8">
    <MudCard Elevation="25" Class="rounded-lg">
        <MudCardHeader>
            <MudText Typo="Typo.h4" Align="Align.Center" Class="w-100">Connexion</MudText>
        </MudCardHeader>
        <MudCardContent>
            <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                
                <MudTextField @bind-Value="loginModel.Email" 
                             Label="Email" 
                             Class="mt-3"
                             Variant="Variant.Outlined" 
                             InputType="InputType.Email"
                             Adornment="Adornment.Start" 
                             AdornmentIcon="@Icons.Material.Filled.Email" />
                <ValidationMessage For="@(() => loginModel.Email)" />
                
                <MudTextField @bind-Value="loginModel.Password"
                             Label="Mot de passe"
                             HelperText="Entrez votre mot de passe"
                             InputType="@passwordInputType"
                             Adornment="Adornment.Start"
                             AdornmentIcon="@Icons.Material.Filled.Lock">
                    <InputContent>
                        <MudIconButton Icon="@passwordIcon" Color="Color.Primary" 
                                      OnClick="TogglePasswordVisibility" Class="pa-0">
                        </MudIconButton>
                    </InputContent>
                </MudTextField>
                <ValidationMessage For="@(() => loginModel.Password)" />
                
                <MudCheckBox T="bool" @bind-Checked="loginModel.RememberMe" 
                            Label="Se souvenir de moi" 
                            Color="Color.Primary" 
                            Class="mt-3" />
                
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <MudAlert Severity="Severity.Error" Class="mt-3 mb-3">@errorMessage</MudAlert>
                }
                
                <div class="d-flex justify-space-between align-center mt-6">
                    <MudLink Href="/register">Créer un compte</MudLink>
                    <MudLink Href="/reset-password-request">Mot de passe oublié ?</MudLink>
                </div>
                
                <MudButton ButtonType="ButtonType.Submit" 
                          Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          Size="Size.Large" 
                          FullWidth="true" 
                          Class="mt-4"
                          Disabled="@isLoading">
                    @if (isLoading)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Connexion en cours...</MudText>
                    }
                    else
                    {
                        <MudText>Se connecter</MudText>
                    }
                </MudButton>
            </EditForm>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private LoginRequest loginModel = new();
    private bool isLoading;
    private string errorMessage = string.Empty;
    
    private bool passwordVisible;
    private InputType passwordInputType = InputType.Password;
    private string passwordIcon = Icons.Material.Filled.VisibilityOff;
    
    private void TogglePasswordVisibility()
    {
        if (passwordVisible)
        {
            passwordVisible = false;
            passwordInputType = InputType.Password;
            passwordIcon = Icons.Material.Filled.VisibilityOff;
        }
        else
        {
            passwordVisible = true;
            passwordInputType = InputType.Text;
            passwordIcon = Icons.Material.Filled.Visibility;
        }
    }
    
    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;
        
        try
        {
            var result = await AuthService.Login(loginModel);
            
            if (result.Success)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
