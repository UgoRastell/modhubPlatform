@page "/login"
@page "/login/{returnUrl}"
@using Frontend.Models
@using System.Web
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor
@using Microsoft.AspNetCore.Components.Web
@using System.Text.Json
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IOAuthConfigService OAuthConfig

<PageTitle>Connexion - ModHub</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-8 py-8">
    <MudCard Elevation="3" Class="rounded-xl" Style="background-color: #232634;">
        <MudCardHeader>
            <MudText Typo="Typo.h4" Align="Align.Center" Class="w-100">Connexion</MudText>
        </MudCardHeader>
        <MudCardContent>
            <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                
                <MudTextField @bind-Value="loginModel.Email" 
                             Label="Email" 
                             Class="mt-3"
                             Variant="Variant.Outlined" 
                             InputType="InputType.Email"
                             Adornment="Adornment.Start" 
                             AdornmentIcon="@Icons.Material.Filled.Email" />
                <ValidationMessage For="@(() => loginModel.Email)" />
                
                <MudTextField @bind-Value="loginModel.Password" Class="mt-3 white-input"
                             Label="Mot de passe"
                             HelperText="Entrez votre mot de passe"
                             InputType="@passwordInputType"
                             Adornment="Adornment.Start"
                             AdornmentIcon="@Icons.Material.Filled.Lock">
                    <InputContent>
                        <MudIconButton Icon="@passwordIcon" Color="Color.Primary" 
                                      OnClick="TogglePasswordVisibility" Class="pa-0">
                        </MudIconButton>
                    </InputContent>
                </MudTextField>
                <ValidationMessage For="@(() => loginModel.Password)" />
                
                <MudCheckBox T="bool" @bind-Checked="loginModel.RememberMe" 
                            Label="Se souvenir de moi" 
                            Color="Color.Primary" 
                            Class="mt-3" />
                
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <MudAlert Severity="Severity.Error" Class="mt-3 mb-3">@errorMessage</MudAlert>
                }
                
                <div class="d-flex justify-space-between align-center mt-6">
                    <MudLink Href="/register">Créer un compte</MudLink>
                    <MudLink Href="/reset-password-request">Mot de passe oublié ?</MudLink>
                </div>
                
                <MudButton ButtonType="ButtonType.Submit" 
                          Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          Size="Size.Large" 
                          FullWidth="true" 
                          Class="mt-4 login-button"
                          Style="transition: all 0.2s ease-in-out; border-radius: 8px;"
                          Disabled="@isLoading">
                    @if (isLoading)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Connexion en cours...</MudText>
                    }
                    else
                    {
                        <MudText>Se connecter</MudText>
                    }
                </MudButton>
            </EditForm>
            
            <MudDivider Class="my-6" />
            
            <MudText Align="Align.Center" Class="mb-4">Ou connectez-vous avec</MudText>
            
            <MudButton Variant="Variant.Outlined" 
                      StartIcon="@Icons.Custom.Brands.Google"
                      Color="Color.Error"
                      FullWidth="true"
                      OnClick="HandleGoogleSignIn">
                Google
            </MudButton>
        </MudCardContent>
    </MudCard>
</MudContainer>

<style>
    /* Styles spécifiques à la page Login */
    ::deep .mud-input-control.mud-input-focused:not(.mud-input-error) .mud-input-border::after {
        border-color: #00aaff !important;
    }
    
    ::deep .mud-input-control.mud-input-focused:not(.mud-input-error) .mud-input-label.mud-input-label-inputcontrol {
        color: #00aaff !important;
    }
    
    .login-button:hover {
        box-shadow: 0 0 12px #00aaff80;
        transform: translateY(-2px);
    }

    /* ensure white text inside password field */
    .white-input input {
        color: #ffffff !important;
    }
    .white-input input::placeholder {
        color: #a7b2c2 !important;
    }
        box-shadow: 0 0 12px #00aaff80;
        transform: translateY(-2px);
    }
</style>

@code {
    [Parameter]
    public string? ReturnUrl { get; set; }
    
    private string returnUrl = string.Empty;
    private LoginRequest loginModel = new();
    private bool isLoading;
    private string errorMessage = string.Empty;
    
    private bool passwordVisible;
    private InputType passwordInputType = InputType.Password;
    private string passwordIcon = Icons.Material.Filled.VisibilityOff;
    
    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var param))
        {
            returnUrl = param.First();
        }
        else if (!string.IsNullOrEmpty(ReturnUrl))
        {
            returnUrl = ReturnUrl;
        }
    }
    
    private void TogglePasswordVisibility()
    {
        if (passwordVisible)
        {
            passwordVisible = false;
            passwordInputType = InputType.Password;
            passwordIcon = Icons.Material.Filled.VisibilityOff;
        }
        else
        {
            passwordVisible = true;
            passwordInputType = InputType.Text;
            passwordIcon = Icons.Material.Filled.Visibility;
        }
    }
    
    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;
        
        try
        {
            var result = await AuthService.Login(loginModel);
            
            if (result.Success)
            {
                if (!string.IsNullOrEmpty(returnUrl) && Uri.IsWellFormedUriString(returnUrl, UriKind.Relative))
                {
                    NavigationManager.NavigateTo(returnUrl);
                }
                else
                {
                    NavigationManager.NavigateTo("/");
                }
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task SignInWithGoogle(string returnUrl = null)
    {
        try
        {
            isLoading = true;
            
            // Récupérer le client ID et redirect URI de façon centralisée
            var clientId = OAuthConfig.GetGoogleClientId();
            var redirectUri = OAuthConfig.GetGoogleRedirectUri();
            
            // Construire l'URL d'autorisation Google OAuth avec OpenID Connect
            var authorizationEndpoint = "https://accounts.google.com/o/oauth2/v2/auth";
            
            // Préparer les paramètres de la requête avec OpenID Connect explicite
            var queryParams = new Dictionary<string, string>
            {
                { "client_id", clientId },
                { "response_type", "code" },
                { "redirect_uri", redirectUri },
                // Explicitement demander OpenID Connect avec email vérifié
                { "scope", "openid email profile" },
                // Demander l'inclusion du claim email_verified dans l'ID token
                { "claims", JsonSerializer.Serialize(new { 
                    id_token = new { 
                        email_verified = new { essential = true } 
                    }
                }) },
                { "access_type", "offline" },
                { "prompt", "consent" },  // Force le consentement explicite
                { "state", Guid.NewGuid().ToString() }
            };
            
            // Ajouter le paramètre returnUrl si disponible
            if (!string.IsNullOrEmpty(returnUrl))
            {
                queryParams.Add("state", $"{Guid.NewGuid().ToString()}|{returnUrl}");
            }
            
            var queryString = string.Join("&", queryParams.Select(p => $"{Uri.EscapeDataString(p.Key)}={Uri.EscapeDataString(p.Value)}"));
            var authorizationRequest = $"{authorizationEndpoint}?{queryString}";
            
            NavigationManager.NavigateTo(authorizationRequest, true);
        }
        catch (Exception ex)
        {
            isLoading = false;
            errorMessage = $"Erreur: {ex.Message}";
        }
    }
    
    private void HandleGoogleSignIn()
    {
        // Appelle la méthode SignInWithGoogle avec le returnUrl actuel
        SignInWithGoogle(returnUrl).ConfigureAwait(false);
    }
}
