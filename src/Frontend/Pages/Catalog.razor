@page "/catalog"
@using Frontend.Models
@using Frontend.Services
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IModService ModService

<PageTitle>Catalogue de mods - ModHub</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4 animate-fade-in">
    <MudText Typo="Typo.h4" Class="gradient-title mb-4">Catalogue de mods</MudText>
    <div class="title-underline mb-6"></div>
    
    <MudGrid>
        <!-- Filtres (colonne de gauche) -->
        <MudItem xs="12" md="3" Class="mb-4">
            <MudPaper Class="pa-4 rounded-xl filter-sidebar" Elevation="3">
                <div class="glow-overlay"></div>
                <MudText Typo="Typo.h6" Class="mb-3">Filtres</MudText>
                
                <MudTextField @bind-Value="filter.SearchText" 
                              Label="Rechercher" 
                              Variant="Variant.Outlined" 
                              Adornment="Adornment.End" 
                              AdornmentIcon="@Icons.Material.Filled.Search" 
                              Class="mb-4" />
                
                <MudText Typo="Typo.subtitle2" Class="mb-2">Jeux</MudText>
                <MudSelect T="string" MultiSelection="true" Label="Sélectionnez un jeu" 
                           Variant="Variant.Outlined" Class="mb-4"
                           SelectedValues="selectedGames"
                           SelectedValuesChanged="@((IEnumerable<string> values) => HandleGamesSelectionChanged(values))">
                    @foreach (var game in games)
                    {
                        <MudSelectItem Value="@game.Id">@game.Name</MudSelectItem>
                    }
                </MudSelect>
                
                <MudText Typo="Typo.subtitle2" Class="mb-2">Tags</MudText>
                <div class="d-flex flex-wrap gap-1 mb-4">
                    @foreach (var tag in popularTags)
                    {
                        <MudChip T="string" Color="@(selectedTags.Contains(tag.Id) ? Color.Primary : Color.Default)" 
                                OnClick="@(() => ToggleTag(tag.Id))" 
                                Size="Size.Small" 
                                Class="mb-1">
                            @tag.Name (@tag.ModCount)
                        </MudChip>
                    }
                </div>
                
                <MudDivider Class="my-4" />
                
                <MudText Typo="Typo.subtitle2" Class="mb-2">Options</MudText>
                <MudCheckBox T="bool" @bind-Checked="filter.ShowPremiumOnly" 
                             Color="Color.Secondary" 
                             Label="Mods premium uniquement" 
                             Class="mb-2" />
                <MudCheckBox T="bool" @bind-Checked="filter.ShowNewOnly" 
                             Color="Color.Info" 
                             Label="Nouveautés uniquement" 
                             Class="mb-2" />
                <MudCheckBox T="bool" @bind-Checked="filter.ShowPopularOnly" 
                             Color="Color.Success" 
                             Label="Populaires uniquement" 
                             Class="mb-2" />
                <MudCheckBox T="bool" @bind-Checked="filter.FavoritesOnly" 
                             Color="Color.Error" 
                             Label="Mes favoris uniquement" 
                             Class="mb-2" />
                
                <MudDivider Class="my-4" />
                
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary" 
                           FullWidth="true" 
                           OnClick="ApplyFilters"
                           Class="gradient-button filter-button mt-2">
                    <span class="button-text">Appliquer les filtres</span>
                </MudButton>
                
                <MudButton Variant="Variant.Text" 
                           Color="Color.Secondary" 
                           FullWidth="true" 
                           OnClick="ResetFilters"
                           Class="reset-button mt-2">
                    <span>Réinitialiser</span>
                </MudButton>
            </MudPaper>
        </MudItem>
        
        <!-- Contenu principal (colonne de droite) -->
        <MudItem xs="12" md="9">
            <!-- Barre d'outils (Tri, Vue grille/liste) -->
            <MudPaper Class="pa-3 d-flex flex-column flex-sm-row gap-2 align-center rounded-xl mb-4 toolbar-panel" 
                     Elevation="3">
                <MudSelect T="SortOption" 
                          @bind-Value="filter.SortBy"
                          Label="Trier par" 
                          AnchorOrigin="Origin.BottomCenter" 
                          Dense="true"
                          Class="flex-grow-1">
                    <MudSelectItem Value="@(SortOption.Popularity)">Popularité</MudSelectItem>
                    <MudSelectItem Value="@(SortOption.RecentlyUpdated)">Récemment mis à jour</MudSelectItem>
                    <MudSelectItem Value="@(SortOption.NewReleases)">Nouveautés</MudSelectItem>
                    <MudSelectItem Value="@(SortOption.TopRated)">Les mieux notés</MudSelectItem>
                    <MudSelectItem Value="@(SortOption.MostDownloaded)">Les plus téléchargés</MudSelectItem>
                    <MudSelectItem Value="@(SortOption.AlphabeticalAZ)">A-Z</MudSelectItem>
                    <MudSelectItem Value="@(SortOption.AlphabeticalZA)">Z-A</MudSelectItem>
                </MudSelect>
                
                <div class="d-flex gap-2 align-center">
                    <MudText Typo="Typo.body2" Class="mud-text-secondary d-none d-sm-block">Vue:</MudText>
                    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Small" Class="view-toggle-group">
                        <MudButton OnClick="@(() => viewMode = ViewMode.Grid)" 
                                  Variant="@(viewMode == ViewMode.Grid ? Variant.Filled : Variant.Outlined)"
                                  Class="@(viewMode == ViewMode.Grid ? "view-toggle-button active" : "view-toggle-button")">
                            <MudIcon Icon="@Icons.Material.Filled.GridView" Size="Size.Small" />
                        </MudButton>
                        <MudButton OnClick="@(() => viewMode = ViewMode.List)" 
                                  Variant="@(viewMode == ViewMode.List ? Variant.Filled : Variant.Outlined)"
                                  Class="@(viewMode == ViewMode.List ? "view-toggle-button active" : "view-toggle-button")">
                            <MudIcon Icon="@Icons.Material.Filled.ViewList" Size="Size.Small" />
                        </MudButton>
                    </MudButtonGroup>
                </div>
            </MudPaper>
            
            @if (isLoading)
            {
                <div class="d-flex justify-center my-8">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
                </div>
            }
            else if (mods.Count == 0)
            {
                <MudPaper Class="pa-6 text-center rounded-xl no-results-panel" Elevation="3">
                    <div class="glow-overlay"></div>
                    <MudIcon Icon="@Icons.Material.Filled.SentimentDissatisfied" Size="Size.Large" Class="mb-4" />
                    <MudText Typo="Typo.h6">Aucun mod trouvé</MudText>
                    <MudText Typo="Typo.body2" Class="mt-2">Essayez de modifier vos filtres ou d'effectuer une recherche différente.</MudText>
                    <MudButton Variant="Variant.Text" 
                               Color="Color.Primary"
                               OnClick="ResetFilters"
                               Class="mt-4">
                        Réinitialiser les filtres
                    </MudButton>
                </MudPaper>
            }
            else
            {
                <!-- Vue grille des mods -->
                @if (viewMode == ViewMode.Grid)
                {
                    <MudGrid>
                        @foreach (var mod in mods)
                        {
                            <MudItem xs="12" sm="6" md="4" lg="4" xl="3">
                                <MudCard Class="mod-card rounded-xl animate-on-scroll" Elevation="3">
                                    <MudCardMedia Image="@(mod.ThumbnailUrl ?? "images/mod-placeholder.jpg")" Height="200" Style="background-size: cover; background-position: center;" />
                                    <div class="position-relative">
                                        @if (mod.IsNew)
                                        {
                                            <MudChip T="string" Color="Color.Info" Size="Size.Small" Class="position-absolute new-badge" Style="top: -16px; left: 12px;">
                                                Nouveau
                                            </MudChip>
                                        }
                                        @if (mod.IsPremium)
                                        {
                                            <MudChip T="string" Color="Color.Warning" Size="Size.Small" Class="position-absolute premium-badge" Style="top: -16px; right: 12px;">
                                                Premium
                                            </MudChip>
                                        }
                                    </div>
                                    <MudCardContent>
                                        <div class="d-flex justify-space-between align-center">
                                            <MudText Typo="Typo.h6" Class="mt-n2 text-truncate gradient-text-name">@mod.Name</MudText>
                                            <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="@(mod.IsFavorite ? Color.Error : Color.Default)" Size="Size.Small" />
                                        </div>
                                        <MudText Typo="Typo.body2" Class="mb-2 text-truncate mud-text-secondary">par @mod.Author</MudText>
                                        <div class="d-flex align-center mb-2">
                                            <MudRating ReadOnly="true" SelectedValue="(int)Math.Round(mod.Rating)" Size="Size.Small" />
                                            <MudText Typo="Typo.body2" Class="ml-2 mud-text-secondary">@mod.Rating.ToString("0.0") (@mod.ReviewCount avis)</MudText>
                                        </div>
                                        <MudText Typo="Typo.body2" Class="mod-description">@mod.Description</MudText>
                                    </MudCardContent>
                                    <MudCardActions Class="d-flex justify-space-between">
                                        <MudText Typo="Typo.caption" Class="mud-text-secondary"><MudIcon Icon="@Icons.Material.Filled.CloudDownload" Size="Size.Small" /> @mod.DownloadCount.ToString("N0")</MudText>
                                        <MudButton Variant="Variant.Text" Color="Color.Primary" EndIcon="@Icons.Material.Filled.ArrowForward" Size="Size.Small" Href="@($"/mods/{mod.Id}")" Class="details-button">
                                            Détails
                                        </MudButton>
                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>
                }
                else
                {
                    <!-- Vue liste des mods -->
                    <MudPaper Class="pa-0" Elevation="0">
                        @foreach (var mod in mods)
                        {
                            <MudPaper Class="pa-3 mb-3 rounded-xl d-flex list-item-card animate-on-scroll" Elevation="3">
                                <div class="glow-overlay-subtle"></div>
                                <div class="d-flex" Style="width:100%">
                                    <!-- Thumbnail / Image -->
                                    <MudAvatar Square="true" Style="width:120px; height:80px; margin-right:16px;" Image="@(mod.ThumbnailUrl ?? "images/mod-placeholder.jpg")" />

                                    <!-- Content -->
                                    <div class="d-flex flex-column" Style="flex-grow:1;">
                                        <!-- Header + Badges -->
                                        <div class="d-flex justify-space-between align-center">
                                            <div>
                                                <MudText Typo="Typo.h6" Class="text-truncate gradient-text-name">@mod.Name</MudText>
                                                <MudText Typo="Typo.body2" Class="text-truncate mud-text-secondary">par @mod.Author</MudText>
                                            </div>
                                            <div>
                                                @if (mod.IsNew)
                                                {
                                                    <MudChip T="string" Color="Color.Info" Size="Size.Small" Class="new-badge mr-1">
                                                        Nouveau
                                                    </MudChip>
                                                }
                                                @if (mod.IsPremium)
                                                {
                                                    <MudChip T="string" Color="Color.Warning" Size="Size.Small" Class="premium-badge">
                                                        Premium
                                                    </MudChip>
                                                }
                                                <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="@(mod.IsFavorite ? Color.Error : Color.Default)" Size="Size.Small" />
                                            </div>
                                        </div>

                                        <!-- Description + Stats -->
                                        <div class="d-flex mt-2 justify-space-between">
                                            <MudText Typo="Typo.body2" Class="mr-2 text-truncate" Style="max-width:70%;">@mod.Description</MudText>
                                            <div class="d-flex align-center">
                                                <MudRating ReadOnly="true" SelectedValue="(int)Math.Round(mod.Rating)" Size="Size.Small" />
                                                <MudText Typo="Typo.caption" Class="ml-2 mr-4 mud-text-secondary">@mod.Rating.ToString("0.0")</MudText>
                                                <MudIcon Icon="@Icons.Material.Filled.CloudDownload" Size="Size.Small" Class="mr-1" />
                                                <MudText Typo="Typo.caption" Class="mud-text-secondary">@mod.DownloadCount.ToString("N0")</MudText>
                                                <MudButton Class="ml-4" Variant="Variant.Text" Color="Color.Primary" EndIcon="@Icons.Material.Filled.ArrowForward" Size="Size.Small" Href="@($"/mods/{mod.Id}")">
                                                    Détails
                                                </MudButton>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </MudPaper>
                        }
                    </MudPaper>
                }
            }
        </MudItem>
    </MudGrid>
</MudContainer>

<style>
    /* Base Styles & Animations */
    .animate-fade-in {
        animation: fadeIn 0.8s ease-in-out;
    }
    
    .animate-on-scroll {
        opacity: 0;
        transform: translateY(20px);
        animation: fadeInUp 0.6s ease-out forwards;
    }
    
    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
    
    @@keyframes fadeInUp {
        from { 
            opacity: 0;
            transform: translateY(20px);
        }
        to { 
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    @@keyframes gradientMove {
        0% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
        100% { background-position: 0% 50%; }
    }
    
    @@keyframes pulse {
        0% { transform: scale(1); opacity: 1; }
        50% { transform: scale(1.05); opacity: 0.9; }
        100% { transform: scale(1); opacity: 1; }
    }
    
    /* Title Styles */
    .gradient-title {
        background: linear-gradient(90deg, var(--mud-palette-primary) 0%, var(--mud-palette-secondary) 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        display: inline-block;
        font-weight: 700;
    }
    
    .title-underline {
        height: 3px;
        width: 150px;
        background: linear-gradient(90deg, var(--mud-palette-primary) 0%, var(--mud-palette-secondary) 100%);
        animation: gradientMove 3s ease infinite;
        background-size: 200% 100%;
        border-radius: 2px;
        margin-top: -8px;
    }
    
    /* Panel Styles */
    .filter-sidebar {
        background-color: #232634;
        position: relative;
        overflow: hidden;
        border: 1px solid rgba(255, 255, 255, 0.05);
        transition: all 0.3s ease;
    }
    
    .filter-sidebar:hover .glow-overlay {
        opacity: 0.15;
    }
    
    .toolbar-panel {
        background-color: #232634;
        border: 1px solid rgba(255, 255, 255, 0.05);
        position: relative;
        overflow: hidden;
    }
    
    .no-results-panel {
        background-color: #232634;
        position: relative;
        overflow: hidden;
    }
    
    /* Glow Effects */
    .glow-overlay {
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: radial-gradient(circle, rgba(var(--mud-palette-primary-rgb), 0.3) 0%, rgba(var(--mud-palette-primary-rgb), 0) 70%);
        opacity: 0.1;
        transition: all 0.3s ease;
        pointer-events: none;
        z-index: 0;
    }
    
    .glow-overlay-subtle {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.03) 0%, rgba(255, 255, 255, 0) 100%);
        pointer-events: none;
        z-index: 0;
    }
    
    /* Buttons Styles */
    .gradient-button {
        background: linear-gradient(90deg, var(--mud-palette-primary) 0%, var(--mud-palette-secondary) 100%) !important;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        border: none !important;
    }
    
    .gradient-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 0 15px rgba(var(--mud-palette-primary-rgb), 0.5);
    }
    
    .gradient-button::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: 0.5s;
    }
    
    .gradient-button:hover::before {
        left: 100%;
    }
    
    .reset-button:hover {
        background-color: rgba(var(--mud-palette-secondary-rgb), 0.1) !important;
    }
    
    .details-button:hover {
        background-color: rgba(var(--mud-palette-primary-rgb), 0.1) !important;
    }
    
    /* Card Styles */
    .mod-card {
        transition: all 0.3s ease-in-out;
        background-color: #232634;
        border: 1px solid rgba(255, 255, 255, 0.05);
        overflow: hidden;
    }
    
    .mod-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    }
    
    .list-item-card {
        transition: all 0.3s ease-in-out;
        background-color: #232634;
        border: 1px solid rgba(255, 255, 255, 0.05);
    }
    
    .list-item-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
    }
    
    /* Text Styles */
    .gradient-text-name {
        background: linear-gradient(90deg, var(--mud-palette-primary) 0%, var(--mud-palette-secondary) 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        font-weight: 600;
    }
    
    /* Badge Styles */
    .premium-badge {
        background: linear-gradient(45deg, #FFD700, #FFA500);
        color: #000;
        font-weight: 600;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
    }
    
    .new-badge {
        background: linear-gradient(45deg, #00aaff, #0077ff);
        font-weight: 600;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
    }
    
    .popular-badge {
        background: linear-gradient(45deg, #25e398, #00cc66);
        font-weight: 600;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
    }
    
    .premium-badge:hover, .new-badge:hover, .popular-badge:hover {
        transform: scale(1.05);
    }
    
    /* Form Control Styles */
    ::deep .mud-input-control.mud-input-focused:not(.mud-input-error) .mud-input-border::after {
        border-color: var(--mud-palette-primary) !important;
    }
    
    ::deep .mud-input-control.mud-input-focused:not(.mud-input-error) .mud-input-label.mud-input-label-inputcontrol {
        color: var(--mud-palette-primary) !important;
    }
    
    /* View Toggle Button Styles */
    .view-toggle-group {
        border: 1px solid rgba(var(--mud-palette-primary-rgb), 0.5);
        border-radius: 4px;
        overflow: hidden;
    }
    
    .view-toggle-button {
        transition: all 0.3s ease;
        position: relative;
        z-index: 1;
    }
    
    .view-toggle-button.active {
        background: linear-gradient(90deg, var(--mud-palette-primary) 0%, var(--mud-palette-secondary) 100%) !important;
        color: white !important;
    }
    
    .view-toggle-button:not(.active) {
        color: var(--mud-palette-text-primary) !important;
        background-color: transparent !important;
    }
    
    .view-toggle-button:not(.active):hover {
        background-color: rgba(var(--mud-palette-primary-rgb), 0.1) !important;
    }
    
    /* Responsive Adjustments */
    @@media (max-width: 960px) {
        .animate-on-scroll {
            opacity: 1;
            transform: translateY(0);
            animation: none;
        }
    }
</style>

@code {
    // Filtre et état de la page
    private CatalogFilter filter = new() { SearchText = string.Empty };
    private bool isLoading = false;
    private HashSet<string> selectedGames = new();
    private HashSet<string> selectedTags = new();
    private List<ModItem> mods = new();
    private ViewMode viewMode = ViewMode.Grid;
    
    // Options pour les sélecteurs
    private List<GameOption> games = new()
    {
        new GameOption { Id = "game1", Name = "Minecraft" },
        new GameOption { Id = "game2", Name = "Skyrim" },
        new GameOption { Id = "game3", Name = "Fallout 4" },
        new GameOption { Id = "game4", Name = "Stardew Valley" },
        new GameOption { Id = "game5", Name = "The Sims 4" }
    };
    
    private List<TagOption> popularTags = new()
    {
        new TagOption { Id = "tag1", Name = "Graphismes", ModCount = 125 },
        new TagOption { Id = "tag2", Name = "Interface", ModCount = 87 },
        new TagOption { Id = "tag3", Name = "Gameplay", ModCount = 204 },
        new TagOption { Id = "tag4", Name = "Audio", ModCount = 56 },
        new TagOption { Id = "tag5", Name = "Armes", ModCount = 98 },
        new TagOption { Id = "tag6", Name = "Armures", ModCount = 76 },
        new TagOption { Id = "tag7", Name = "Quêtes", ModCount = 42 },
        new TagOption { Id = "tag8", Name = "Personnages", ModCount = 63 }
    };
    
    // Méthodes de gestion des filtres
    private void HandleGamesSelectionChanged(IEnumerable<string> values)
    {
        selectedGames.Clear();
        foreach (var value in values)
        {
            selectedGames.Add(value);
        }
    }
    
    private void ToggleTag(string tagId)
    {
        if (selectedTags.Contains(tagId))
            selectedTags.Remove(tagId);
        else
            selectedTags.Add(tagId);
    }
    
    private async void ApplyFilters()
    {
        isLoading = true;
        await LoadModsFromApiAsync();
        isLoading = false;
        StateHasChanged();
    }
    
    private void ResetFilters()
    {
        filter = new CatalogFilter() { SearchText = string.Empty };
        selectedGames.Clear();
        selectedTags.Clear();
        ApplyFilters();
    }
    
    private async Task LoadModsFromApiAsync()
    {
        try
        {
            // Convert CatalogFilter to API parameters
            string searchTerm = filter.SearchText;
            string category = string.Empty;
            if (selectedGames.Count > 0)
            {
                category = string.Join(",", selectedGames);
            }
            
            // Map SortOption to API sortBy parameter
            string sortBy = filter.SortBy switch
            {
                SortOption.Popularity => "popularity",
                SortOption.RecentlyUpdated => "updated",
                SortOption.NewReleases => "newest",
                SortOption.TopRated => "rating",
                SortOption.MostDownloaded => "downloads",
                SortOption.AlphabeticalAZ => "nameAsc",
                SortOption.AlphabeticalZA => "nameDesc",
                _ => "recent"
            };
            
            // Call API via ModService
            var response = await ModService.GetModsAsync(1, 50, searchTerm, category, sortBy);
            
            if (response.Success && response.Data != null)
            {
                // Convert API response to ModItem list for display
                mods = response.Data.Items.Select(m => new ModItem
                {
                    Id = m.Id,
                    Name = m.Name,
                    Description = m.Description,
                    ThumbnailUrl = !string.IsNullOrEmpty(m.ThumbnailUrl) ? m.ThumbnailUrl : "images/mod-placeholder.jpg",
                    Author = m.CreatorName,
                    AuthorId = m.CreatorId,
                    ReleaseDate = m.CreatedAt,
                    LastUpdated = m.UpdatedAt != default ? m.UpdatedAt : m.CreatedAt,
                    DownloadCount = (int)m.DownloadCount,
                    Rating = m.AverageRating,
                    ReviewCount = m.RatingCount,
                    IsPremium = m.IsFeatured, // Using IsFeatured as premium indicator
                    IsNew = (DateTime.UtcNow - m.CreatedAt).TotalDays <= 7,
                    IsPopular = m.DownloadCount > 1000,  // Arbitrary threshold
                    GameName = m.GameName,
                    GameId = m.GameId,
                    Tags = m.Tags ?? new List<string>(),
                    IsFavorite = false  // TODO: Implement user favorites
                }).ToList();
                
                if (filter.ShowPremiumOnly)
                    mods = mods.Where(m => m.IsPremium).ToList();
                
                if (filter.ShowNewOnly)
                    mods = mods.Where(m => m.IsNew).ToList();
                
                if (filter.ShowPopularOnly)
                    mods = mods.Where(m => m.IsPopular).ToList();
                
                // Additional filtering for tags if needed
                if (selectedTags.Count > 0)
                    mods = mods.Where(m => m.Tags.Any(t => selectedTags.Contains(t))).ToList();
            }
            else
            {
                Snackbar.Add(response.Message ?? "Échec de chargement des mods", Severity.Error);
                mods = new List<ModItem>();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur: {ex.Message}", Severity.Error);
            mods = new List<ModItem>();
        }
    }
    
    private void LoadMockMods()
    {
        // Data de démonstration
        mods = new List<ModItem>
        {
            new ModItem
            {
                Id = "mod1",
                Name = "HD Texture Pack",
                Description = "Pack de textures haute définition pour une expérience visuelle améliorée",
                ThumbnailUrl = "images/mods/texture-pack.jpg",
                Author = "ModCreator",
                AuthorId = "user1",
                DownloadCount = 15420,
                Rating = 4.7,
                IsPremium = true,
                IsNew = false,
                IsPopular = true,
                GameName = "Skyrim",
                GameId = "game2",
                Tags = new List<string> { "tag1", "tag5" }
            },
            new ModItem
            {
                Id = "mod2",
                Name = "Advanced Farming",
                Description = "Ajoute des mécaniques de farming avancées et de nouveaux légumes",
                ThumbnailUrl = "images/mods/farming-mod.jpg",
                Author = "FarmSimLover",
                AuthorId = "user2",
                DownloadCount = 8750,
                Rating = 4.9,
                IsPremium = false,
                IsNew = true,
                IsPopular = true,
                GameName = "Stardew Valley",
                GameId = "game4",
                Tags = new List<string> { "tag3" }
            },
            new ModItem
            {
                Id = "mod3",
                Name = "Immersive Audio Overhaul",
                Description = "Refonte complète des effets sonores et des musiques pour une immersion totale",
                ThumbnailUrl = "images/mods/audio-mod.jpg",
                Author = "SoundDesigner",
                AuthorId = "user3",
                DownloadCount = 6240,
                Rating = 4.5,
                IsPremium = false,
                IsNew = false,
                IsPopular = false,
                GameName = "Fallout 4",
                GameId = "game3",
                Tags = new List<string> { "tag4" }
            },
        };
    }
    
    protected override async Task OnInitializedAsync()
    {
        // Charger les données réelles depuis l'API
        isLoading = true;
        await LoadModsFromApiAsync();
        isLoading = false;
    }
    
    // Utilisation de l'énumération SortOption définie dans CatalogModels.cs
    
    public enum ViewMode
    {
        Grid,
        List
    }
}
