@page "/reset-password"
@using Frontend.Models
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Réinitialisation de mot de passe - ModsGamingPlatform</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-8 py-8">
    <MudCard Elevation="25" Class="rounded-lg">
        <MudCardHeader>
            <MudText Typo="Typo.h4" Align="Align.Center" Class="w-100">Réinitialisation du mot de passe</MudText>
        </MudCardHeader>
        <MudCardContent>
            @if (!resetComplete)
            {
                <MudText Typo="Typo.body1" Class="mb-4">
                    Veuillez définir votre nouveau mot de passe.
                </MudText>

                <EditForm Model="model" OnValidSubmit="HandleResetPassword">
                    <DataAnnotationsValidator />

                    <MudTextField @bind-Value="model.Email" 
                                 Label="Adresse email" 
                                 Class="mt-3"
                                 Variant="Variant.Outlined" 
                                 InputType="InputType.Email"
                                 Disabled="true"
                                 Adornment="Adornment.Start" 
                                 AdornmentIcon="@Icons.Material.Filled.Email" />
                    <ValidationMessage For="@(() => model.Email)" />

                    <MudTextField @bind-Value="model.Password" 
                                 Label="Nouveau mot de passe" 
                                 Class="mt-4"
                                 Variant="Variant.Outlined" 
                                 InputType="@passwordInputType"
                                 Adornment="Adornment.Start"
                                 AdornmentIcon="@passwordIcon">
                        <InputContent>
                            <MudIconButton Icon="@passwordIcon" Color="Color.Primary" 
                                         OnClick="TogglePasswordVisibility" Class="pa-0">
                            </MudIconButton>
                        </InputContent>
                    </MudTextField>
                    <ValidationMessage For="@(() => model.Password)" />

                    <MudTextField @bind-Value="model.ConfirmPassword" 
                                 Label="Confirmer le mot de passe" 
                                 Class="mt-4"
                                 Variant="Variant.Outlined" 
                                 InputType="@confirmPasswordInputType"
                                 Adornment="Adornment.Start"
                                 AdornmentIcon="@confirmPasswordIcon">
                        <InputContent>
                            <MudIconButton Icon="@confirmPasswordIcon" Color="Color.Primary" 
                                         OnClick="ToggleConfirmPasswordVisibility" Class="pa-0">
                            </MudIconButton>
                        </InputContent>
                    </MudTextField>
                    <ValidationMessage For="@(() => model.ConfirmPassword)" />


                    <MudAlert Severity="Severity.Info" Variant="Variant.Outlined" Class="my-4">
                        Le mot de passe doit contenir au moins 8 caractères, incluant une lettre majuscule, 
                        un chiffre et un caractère spécial.
                    </MudAlert>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <MudAlert Severity="Severity.Error" Class="my-4">@errorMessage</MudAlert>
                    }

                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              ButtonType="ButtonType.Submit" 
                              Size="Size.Large" 
                              FullWidth="true" 
                              Class="mt-6"
                              Disabled="@isLoading">
                        @if (isLoading)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Réinitialisation en cours...</MudText>
                        }
                        else
                        {
                            <MudText>Réinitialiser le mot de passe</MudText>
                        }
                    </MudButton>
                </EditForm>
            }
            else
            {
                <MudAlert Severity="Severity.Success" Variant="Variant.Filled" Class="mb-4">
                    <MudText Typo="Typo.body1">
                        Votre mot de passe a été réinitialisé avec succès !
                    </MudText>
                </MudAlert>

                <MudText Typo="Typo.body2" Class="mb-4">
                    Vous pouvez maintenant vous connecter avec votre nouveau mot de passe.
                </MudText>
                
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          OnClick="@(() => NavigationManager.NavigateTo("/login"))" 
                          FullWidth="true" 
                          Class="mt-4">
                    Se connecter
                </MudButton>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string? Token { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "email")]
    public string? Email { get; set; }

    private Models.ResetPasswordRequest model = new Models.ResetPasswordRequest();
    private bool isLoading;
    private bool resetComplete;
    private string errorMessage = string.Empty;
    
    private bool passwordVisible;
    private InputType passwordInputType = InputType.Password;
    private string passwordIcon = Icons.Material.Filled.VisibilityOff;
    
    private bool confirmPasswordVisible;
    private InputType confirmPasswordInputType = InputType.Password;
    private string confirmPasswordIcon = Icons.Material.Filled.VisibilityOff;

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(Token) || string.IsNullOrEmpty(Email))
        {
            NavigationManager.NavigateTo("/reset-password-request");
            return;
        }

        model.Token = Token;
        model.Email = Email;
    }

    private void TogglePasswordVisibility()
    {
        if (passwordVisible)
        {
            passwordVisible = false;
            passwordInputType = InputType.Password;
            passwordIcon = Icons.Material.Filled.VisibilityOff;
        }
        else
        {
            passwordVisible = true;
            passwordInputType = InputType.Text;
            passwordIcon = Icons.Material.Filled.Visibility;
        }
    }

    private void ToggleConfirmPasswordVisibility()
    {
        if (confirmPasswordVisible)
        {
            confirmPasswordVisible = false;
            confirmPasswordInputType = InputType.Password;
            confirmPasswordIcon = Icons.Material.Filled.VisibilityOff;
        }
        else
        {
            confirmPasswordVisible = true;
            confirmPasswordInputType = InputType.Text;
            confirmPasswordIcon = Icons.Material.Filled.Visibility;
        }
    }

    private async Task HandleResetPassword()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var result = await AuthService.ResetPassword(model);

            if (result.Success)
            {
                resetComplete = true;
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Une erreur est survenue: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
