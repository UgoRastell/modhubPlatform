@page "/payment-history"
@using Frontend.Models
@using Frontend.Services
@using System.Threading.Tasks
@using PaymentHistoryModel = Frontend.Models.PaymentHistory
@inject IPaymentService PaymentService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar

<style>
    .payment-card {
        margin-bottom: 16px;
        transition: all 0.3s;
    }
    
    .payment-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }
    
    .status-badge {
        padding: 4px 8px;
        border-radius: 4px;
        font-weight: 500;
    }
    
    .status-succeeded {
        background-color: #4caf50;
        color: white;
    }
    
    .status-pending {
        background-color: #ff9800;
        color: white;
    }
    
    .status-failed {
        background-color: #f44336;
        color: white;
    }
    
    .status-refunded {
        background-color: #9e9e9e;
        color: white;
    }
</style>

<PageTitle>Historique des paiements | ModHub</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="py-8">
    <MudText Typo="Typo.h3" Class="mb-4">Historique des paiements</MudText>
    <MudText Typo="Typo.body1" Class="mb-8">Retrouvez l'ensemble de vos transactions et leur statut.</MudText>

    @if (_isLoading)
    {
        <MudContainer Class="d-flex justify-center">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        </MudContainer>
    }
    else if (_payments == null || _payments.Count == 0)
    {
        <MudAlert Severity="Severity.Info" Class="my-4">
            Vous n'avez effectué aucun paiement pour le moment.
        </MudAlert>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/payment" Class="mt-4">
            Effectuer un premier achat
        </MudButton>
    }
    else
    {
        <MudGrid>
            <MudItem xs="12">
                <MudPaper Class="pa-3">
                    <MudText Typo="Typo.h6" Class="mb-2">Filtrer par</MudText>
                    <MudGrid>
                        <MudItem xs="12" md="6">
                            <MudSelect T="string" Label="Statut" ValueChanged="@FilterByStatus">
                                <MudSelectItem Value="@("all")">Tous</MudSelectItem>
                                <MudSelectItem Value="@("succeeded")">Réussi</MudSelectItem>
                                <MudSelectItem Value="@("pending")">En attente</MudSelectItem>
                                <MudSelectItem Value="@("failed")">Échoué</MudSelectItem>
                                <MudSelectItem Value="@("refunded")">Remboursé</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudDateRangePicker Label="Période" @bind-DateRange="_dateRange" DateFormat="dd/MM/yyyy">
                                <PickerActions>
                                    <MudButton Class="mr-auto align-self-start" OnClick="@(() => _dateRange = null)">Réinitialiser</MudButton>
                                    <MudButton OnClick="@ApplyDateFilter" Color="Color.Primary" Variant="Variant.Filled">Appliquer</MudButton>
                                </PickerActions>
                            </MudDateRangePicker>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>

            @foreach (var payment in _filteredPayments)
            {
                <MudItem xs="12" sm="6" lg="4">
                    <MudCard Elevation="4" Class="payment-card">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@payment.Description</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudChip T="string" Class="@GetStatusClass(payment.Status)">
                                    @GetStatusText(payment.Status)
                                </MudChip>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.body2" Class="mb-2">
                                <strong>ID de paiement:</strong> @payment.PaymentId.Substring(0, Math.Min(payment.PaymentId.Length, 12))...
                            </MudText>
                            <MudText Typo="Typo.body2" Class="mb-2">
                                <strong>Date:</strong> @payment.PaymentDate.ToString("dd/MM/yyyy HH:mm")
                            </MudText>
                            <MudText Typo="Typo.body2" Class="mb-2">
                                <strong>Montant:</strong> @FormatAmount(payment.Amount) @payment.Currency.ToUpper()
                            </MudText>
                            <MudText Typo="Typo.body2">
                                <strong>Type:</strong> @(payment.IsRecurring ? "Abonnement" : "Achat unique")
                            </MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Text" Color="Color.Primary">Détails</MudButton>
                            @if (payment.Status == "succeeded")
                            {
                                <MudButton Variant="Variant.Text" Color="Color.Secondary">Télécharger la facture</MudButton>
                            }
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

@code {
    private List<PaymentHistoryModel> _payments = new();
    private List<PaymentHistoryModel> _filteredPayments = new();
    private bool _isLoading = true;
    private DateRange _dateRange = null;
    private string _currentUserId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadPayments();
    }

    private async Task LoadPayments()
    {
        _isLoading = true;
        
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            
            if (user.Identity.IsAuthenticated)
            {
                _currentUserId = user.FindFirst(c => c.Type == "sub")?.Value ?? user.Identity.Name;
                
                if (!string.IsNullOrEmpty(_currentUserId))
                {
                    _payments = await PaymentService.GetPaymentHistoryAsync(_currentUserId);
                    _filteredPayments = new List<PaymentHistoryModel>(_payments);
                }
            }
            else
            {
                Snackbar.Add("Vous devez être connecté pour voir votre historique de paiements", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur lors du chargement des paiements: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void FilterByStatus(string status)
    {
        if (status == "all")
        {
            _filteredPayments = new List<PaymentHistoryModel>(_payments);
        }
        else
        {
            _filteredPayments = _payments.Where(p => p.Status.ToLower() == status.ToLower()).ToList();
        }
        
        // Appliquer également le filtre de date si actif
        if (_dateRange != null)
        {
            ApplyDateFilter();
        }
    }

    private void ApplyDateFilter()
    {
        if (_dateRange != null && _dateRange.Start.HasValue && _dateRange.End.HasValue)
        {
            var startDate = _dateRange.Start.Value.Date;
            var endDate = _dateRange.End.Value.Date.AddDays(1).AddSeconds(-1); // Jusqu'à la fin du jour
            
            _filteredPayments = _filteredPayments
                .Where(p => p.PaymentDate >= startDate && p.PaymentDate <= endDate)
                .ToList();
        }
    }

    private string GetStatusClass(string status)
    {
        return status.ToLower() switch
        {
            "succeeded" => "status-succeeded",
            "pending" => "status-pending",
            "failed" => "status-failed",
            "refunded" => "status-refunded",
            _ => ""
        };
    }

    private string GetStatusText(string status)
    {
        return status.ToLower() switch
        {
            "succeeded" => "Réussi",
            "pending" => "En attente",
            "failed" => "Échoué",
            "refunded" => "Remboursé",
            _ => status
        };
    }

    private string FormatAmount(long amountInCents)
    {
        return (amountInCents / 100.0).ToString("F2");
    }
}
