@page "/mod/{ModId}"
@using System.Globalization
@using System.Linq
@using Frontend.Models
@using MudBlazor
@inject Frontend.Services.Interfaces.IModService ModService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Détails du mod | ModHub</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4 surface-dark mod-detail-wrapper">
    @if (loading)
    {
        <div class="d-flex justify-center my-8">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
        </div>
    }
    else if (mod == null)
    {
        <MudAlert Severity="Severity.Error" Class="my-4">
            Le mod demandé n'a pas été trouvé.
            <MudButton Variant="Variant.Text" Color="Color.Primary"
                       OnClick="@(() => NavigationManager.NavigateTo("/marketplace"))">
                Retour à la marketplace
            </MudButton>
        </MudAlert>
    }
    else
    {
        <MudBreadcrumbs T="BreadcrumbItem" Items="@breadcrumbs" Separator="/" Class="mb-4" />

        <MudGrid>
            <!-- Colonne principale -->
            <MudItem xs="12" md="8">
                <MudPaper Elevation="2" Class="pa-4 mb-4">
                    <!-- Titre + badge -->
                    <div class="d-flex justify-space-between align-center">
                        <MudText Typo="Typo.h4" Class="mb-2">@mod.Name</MudText>
                        @if (mod.IsFeatured)
                        {
                            <MudChip T="string" Color="Color.Warning" Size="Size.Medium">Premium</MudChip>
                        }
                        else
                        {
                            <MudChip T="string" Color="Color.Success" Size="Size.Medium">Gratuit</MudChip>
                        }
                    </div>

                    <!-- Chips catégorie/jeu -->
                    <div class="d-flex gap-2 mb-4">
                        @if (!string.IsNullOrWhiteSpace(mod.GameName))
                        {
                            <MudChip T="string" Color="Color.Primary">@mod.GameName</MudChip>
                        }
                        @if (mod.Categories?.Any() == true)
                        {
                            <MudChip T="string" Color="Color.Default">@mod.Categories.First()</MudChip>
                        }
                        @if (mod.IsFeatured)
                        {
                            <MudChip T="string" Color="Color.Secondary">Mis en avant</MudChip>
                        }
                    </div>

                    <!-- Description -->
                    <MudText Class="mb-6">@mod.Description</MudText>

                    <!-- Carrousel -->
                    <MudText Typo="Typo.h6" Class="mb-2">Image</MudText>
                    <div class="d-flex justify-center mb-6">
                        <img src="@((mod.ScreenshotUrls?.FirstOrDefault()) ?? mod.ThumbnailUrl)"
                             style="max-width:100%;max-height:400px;object-fit:contain"
                             alt="@mod.Name" />
                    </div>

                    <!-- Panneaux d’informations complémentaires (placeholders) -->
                    <MudExpansionPanels Class="mb-6">
                        <MudExpansionPanel Text="Fichiers inclus">
                            <!-- Liste des fichiers -->
                        </MudExpansionPanel>
                        <MudExpansionPanel Text="Instructions d'installation">
                            <!-- Instructions -->
                        </MudExpansionPanel>
                        <MudExpansionPanel Text="Compatibilité">
                            <!-- Compatibilité -->
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                </MudPaper>
            </MudItem>

            <!-- Colonne latérale -->
            <MudItem xs="12" md="4">
                <MudPaper Elevation="2" Class="pa-4 mb-4">
                    <div class="d-flex flex-column gap-4">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth Size="Size.Large"
                                   StartIcon="@Icons.Material.Filled.Download"
                                   Disabled="@isDownloading"
                                   OnClick="@DownloadModAsync">
                            @(mod.IsFeatured ? "Téléchargement Premium" : "Télécharger")
                        </MudButton>

                    </div>

                    <MudDivider Class="my-4" />

                    <!-- Infos -->
                    <MudText Typo="Typo.h6" Class="mb-2">Informations</MudText>
                    <MudList T="string" Dense>
                        <MudListItem T="string" Icon="@Icons.Material.Filled.Person">
                            Créateur :
                            <MudLink Href="#" Color="Color.Primary">
                                @(!string.IsNullOrWhiteSpace(mod.CreatorName) ? mod.CreatorName : mod.Author)
                            </MudLink>
                        </MudListItem>
                        <MudListItem T="string" Icon="@Icons.Material.Filled.Update">
                            Dernière mise à jour : @mod.UpdatedAt.ToString("dd/MM/yyyy")
                        </MudListItem>
                        <MudListItem T="string" Icon="@Icons.Material.Filled.GetApp">
                            Téléchargements : @mod.DownloadCount.ToString("N0", new CultureInfo("fr-FR"))
                        </MudListItem>
                    </MudList>

                    <MudDivider Class="my-4" />

                    <!-- Évaluations -->
                    <MudText Typo="Typo.h6" Class="mb-2">Évaluations</MudText>
                    <div class="d-flex align-center mb-2">
                        <MudRating ReadOnly SelectedValue="@((int)Math.Round(mod.AverageRating))" />
                        <MudText Class="ml-2">@mod.AverageRating.ToString("0.0", new CultureInfo("fr-FR"))/5</MudText>
                    </div>
                    <MudText Typo="Typo.body2">
                        Basé sur @mod.RatingCount.ToString("N0", new CultureInfo("fr-FR")) avis
                    </MudText>

                </MudPaper>
            </MudItem>
        </MudGrid>

<!--====================================================-->
<!-- STYLES                                             -->
<!--====================================================-->
<style scoped>
    .mod-detail-wrapper {
        border-radius: 16px;
        padding: 32px;
    }
</style>
    }
</MudContainer>

@code {
    [Parameter] public string ModId { get; set; } = default!;

    private bool loading = true;
    private bool isDownloading = false;
    private ModDto? mod;
    private List<BreadcrumbItem> breadcrumbs = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Breadcrumbs
            breadcrumbs = new()
            {
                new BreadcrumbItem("Accueil", href: "/"),
                new BreadcrumbItem("Marketplace", href: "/marketplace"),
                new BreadcrumbItem("Détails du mod", href: null, disabled: true)
            };

            // Appel API
            var response = await ModService.GetModAsync(ModId);
            if (response?.Success == true)
            {
                mod = response.Data;
            }

            loading = false;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur lors du chargement des détails du mod : {ex.Message}", Severity.Error);
            loading = false;
        }
    }

    private async Task DownloadModAsync()
    {
        if (mod == null) return;
        if (mod.IsFeatured)
        {
            Snackbar.Add("Ce mod est Premium – redirection vers le paiement…", Severity.Info);
            return;
        }

        if (isDownloading) return;
        isDownloading = true;
        StateHasChanged();

        try
        {
            var downloadResponse = await ModService.DownloadModAsync(mod.Id, null);
            if (downloadResponse.Success && !string.IsNullOrWhiteSpace(downloadResponse.Data))
            {
                await JSRuntime.InvokeVoidAsync("open", downloadResponse.Data, "_blank");
                Snackbar.Add($"Téléchargement de {mod.Name} démarré !", Severity.Success);
                mod.DownloadCount++;
            }
            else
            {
                Snackbar.Add(downloadResponse.Message ?? "Erreur lors du téléchargement", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur de téléchargement: {ex.Message}", Severity.Error);
        }
        finally
        {
            isDownloading = false;
            StateHasChanged();
        }
    }
}