@using Frontend.Models.Affiliate
@using MudBlazor
@using FluentValidation
@using Frontend.Models.Affiliate.Requests
@inject IModService ModService

<MudDialog>
    <DialogContent>
        <MudForm @ref="_form" Model="@_linkRequest" Validator="@(new Func<object, string>(ValidateForm))">
            <MudGrid>
                <MudItem xs="12">
                    <MudSelect T="string" Label="Type de cible" Required="true"
                              @bind-Value="_linkRequest.TargetType"
                              For="@(() => _linkRequest.TargetType)"
                              Immediate="true"
                              OnSelectedValuesChanged="@HandleTargetTypeChanged">
                        <MudSelectItem Value="@("mod")">Mod</MudSelectItem>
                        <MudSelectItem Value="@("subscription")">Abonnement Premium</MudSelectItem>
                        <MudSelectItem Value="@("site")">Site entier</MudSelectItem>
                    </MudSelect>
                </MudItem>
                
                @if (_linkRequest.TargetType == "mod")
                {
                    <MudItem xs="12">
                        @if (_loadingMods)
                        {
                            <MudProgressCircular Indeterminate="true" Size="Size.Small" />
                        }
                        else
                        {
                            <MudAutocomplete T="ModBasicInfo" Label="Sélectionner un mod" Required="true"
                                         @bind-Value="SelectedMod"
                                         SearchFunc="@SearchMods"
                                         ToStringFunc="@(mod => mod.Name)"
                                         For="@(() => SelectedMod)">
                                <ItemTemplate Context="mod">
                                    <MudText>@mod.Name</MudText>
                                </ItemTemplate>
                            </MudAutocomplete>
                        }
                    </MudItem>
                }
                
                <MudItem xs="12">
                    <MudTextField @bind-Value="_linkRequest.CustomLabel" Label="Étiquette personnalisée (optionnel)" 
                                For="@(() => _linkRequest.CustomLabel)"
                                HelperText="Une étiquette personnalisée pour identifier ce lien (ex: 'Instagram', 'YouTube')"/>
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField T="string" Label="UTM Source (optionnel)"
                                @bind-Value="_linkRequest.UtmSource"
                                For="@(() => _linkRequest.UtmSource)"
                                HelperText="Permet de suivre la source du trafic (ex: 'newsletter', 'twitter')"/>
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField T="string" Label="UTM Medium (optionnel)"
                                @bind-Value="_linkRequest.UtmMedium"
                                For="@(() => _linkRequest.UtmMedium)"
                                HelperText="Permet de suivre le média (ex: 'social', 'email')"/>
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField T="string" Label="UTM Campaign (optionnel)"
                                @bind-Value="_linkRequest.UtmCampaign"
                                For="@(() => _linkRequest.UtmCampaign)"
                                HelperText="Permet de suivre la campagne spécifique (ex: 'summer_sale')"/>
                </MudItem>
                
                @if (_programDetails?.AllowCustomCommission == true)
                {
                    <MudItem xs="12">
                        <MudSlider T="decimal" @bind-Value="CommissionValue"
                                   Min="0m"
                                   Max="@(Convert.ToDecimal(_programDetails?.MaxCustomCommission ?? 10))"
                                   Step="0.5m"
                                   TickMarks="true"
                                   Label="Commission personnalisée">
                            @(CommissionValue)%
                        </MudSlider>
                        <MudText Typo="Typo.caption">
                            Définissez une commission personnalisée pour ce lien (maximum @(_programDetails?.MaxCustomCommission)%).
                            Laissez à 0 pour utiliser la commission standard de @(_programDetails?.CommissionPercentage)%.
                        </MudText>
                    </MudItem>
                }
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Annuler</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit">Créer le lien</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public AffiliateProgramInfo? ProgramDetails { get; set; }
    
    private MudForm _form = null!;
    private LinkGenerationRequest _linkRequest = new()
    {
        ModId = string.Empty,
        CustomTag = string.Empty
    };
    private ModBasicInfo? _selectedMod;
    private bool _loadingMods;
    private AffiliateProgramInfo? _programDetails => ProgramDetails;
    
    // Propriété intermédiaire pour le binding avec MudSlider
    private decimal CommissionValue
    {
        get => _linkRequest.CustomCommissionPercentage ?? 0m;
        set => _linkRequest.CustomCommissionPercentage = value > 0m ? value : null;
    }
    
    // Add property with setter to update TargetId when a mod is selected
    private ModBasicInfo? SelectedMod
    {
        get => _selectedMod;
        set
        {
            _selectedMod = value;
            if (_selectedMod != null)
            {
                _linkRequest.TargetId = _selectedMod.Id;
            }
        }
    }
    
    public class ModBasicInfo
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
    }
    
    
    private string ValidateForm(object model)
    {
        if (model is LinkGenerationRequest request)
        {
            // Validation de base
            if (string.IsNullOrWhiteSpace(request.TargetType))
                return "Le type de cible est requis";
                
            // Valider que si le type est mod, un mod est sélectionné
            if (request.TargetType == "mod" && string.IsNullOrWhiteSpace(request.TargetId))
                return "Veuillez sélectionner un mod";
        }
        
        return string.Empty;
    }
    
    private async Task<IEnumerable<ModBasicInfo>> SearchMods(string value, CancellationToken cancellationToken = default)
    {
        if (string.IsNullOrEmpty(value))
        {
            return new List<ModBasicInfo>();
        }
        
        _loadingMods = true;
        try
        {
            // Mock implementation until the service method is implemented
            // Normally we would call: await ModService.SearchModsAsync(value, cancellationToken);
            await Task.Delay(100, cancellationToken); // Simulate API call
            
            // Return mock data
            return new List<ModBasicInfo> 
            {
                new ModBasicInfo { Id = "mod1", Name = $"{value} Mod 1" },
                new ModBasicInfo { Id = "mod2", Name = $"{value} Mod 2" },
                new ModBasicInfo { Id = "mod3", Name = $"{value} Mod 3" }
            };
        }
        catch (Exception)
        {
            return new List<ModBasicInfo>();
        }
        finally
        {
            _loadingMods = false;
            StateHasChanged();
        }
    }
    
    private Task HandleTargetTypeChanged(IEnumerable<string> values)
    {
        // Réinitialiser l'ID de cible si le type change
        _linkRequest.TargetId = string.Empty;
        _selectedMod = null;
        
        // Si le type est "site", il n'y a pas d'ID spécifique à sélectionner
        if (_linkRequest.TargetType == "site")
        {
            _linkRequest.TargetId = "site";
        }
        else if (_linkRequest.TargetType == "subscription")
        {
            _linkRequest.TargetId = "premium";
        }
        
        return Task.CompletedTask;
    }
    
    private void Submit()
    {
        _form.Validate();
        if (_form.IsValid)
        {
            MudDialog.Close(DialogResult.Ok(_linkRequest));
        }
    }
    
    private void Cancel() => MudDialog.Cancel();
    
    public class LinkGenerationValidator : FluentValidation.AbstractValidator<LinkGenerationRequest>
    {
        public LinkGenerationValidator()
        {
            RuleFor(x => x.TargetType)
                .NotEmpty().WithMessage("Le type de cible est requis");
                
            RuleFor(x => x.TargetId)
                .NotEmpty().When(x => x.TargetType == "mod")
                .WithMessage("Veuillez sélectionner un mod");
        }
    }
}
