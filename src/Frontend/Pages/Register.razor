@page "/register"
@using Frontend.Models
@using System.Web
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor
@using Microsoft.AspNetCore.Components.Web
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IOAuthConfigService OAuthConfig

<PageTitle>Inscription - ModHub</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-8 py-8">
    <MudCard Elevation="3" Class="rounded-xl" Style="background-color: #232634;">
        <MudCardHeader>
            <MudText Typo="Typo.h4" Align="Align.Center" Class="w-100">Créer un compte</MudText>
        </MudCardHeader>
        <MudCardContent>
            <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
                <DataAnnotationsValidator />

                <MudTextField @bind-Value="registerModel.Username" 
                             Label="Nom d'utilisateur" 
                             Class="mt-3"
                             Variant="Variant.Outlined"
                             Adornment="Adornment.Start" 
                             AdornmentIcon="@Icons.Material.Filled.Person" />
                <ValidationMessage For="@(() => registerModel.Username)" />

                <MudTextField @bind-Value="registerModel.Email" 
                             Label="Adresse email" 
                             Class="mt-3"
                             Variant="Variant.Outlined" 
                             InputType="InputType.Email"
                             Adornment="Adornment.Start" 
                             AdornmentIcon="@Icons.Material.Filled.Email" />
                <ValidationMessage For="@(() => registerModel.Email)" />

                <MudTextField @bind-Value="registerModel.Password" 
                             Label="Mot de passe" 
                             Class="mt-3"
                             Variant="Variant.Outlined" 
                             InputType="@passwordInputType"
                             Adornment="Adornment.Start"
                             AdornmentIcon="@passwordIcon">
                    <InputContent>
                        <MudIconButton Icon="@passwordIcon" Color="Color.Primary" 
                                     OnClick="TogglePasswordVisibility" Class="pa-0">
                        </MudIconButton>
                    </InputContent>
                </MudTextField>
                <ValidationMessage For="@(() => registerModel.Password)" />

                <MudTextField @bind-Value="registerModel.ConfirmPassword" 
                             Label="Confirmer le mot de passe" 
                             Class="mt-3"
                             Variant="Variant.Outlined" 
                             InputType="@confirmPasswordInputType"
                             Adornment="Adornment.Start"
                             AdornmentIcon="@confirmPasswordIcon">
                    <InputContent>
                        <MudIconButton Icon="@confirmPasswordIcon" Color="Color.Primary" 
                                     OnClick="ToggleConfirmPasswordVisibility" Class="pa-0">
                        </MudIconButton>
                    </InputContent>
                </MudTextField>
                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />

                <MudAlert Severity="Severity.Info" Variant="Variant.Outlined" Class="my-4">
                    Le mot de passe doit contenir au moins 8 caractères, incluant une lettre majuscule, 
                    un chiffre et un caractère spécial.
                </MudAlert>

                <MudCheckBox @bind-Value="registerModel.AcceptTerms" 
                            Label="J'accepte les conditions d'utilisation et la politique de confidentialité" 
                            Color="Color.Primary" 
                            Class="mt-3" />
                <ValidationMessage For="@(() => registerModel.AcceptTerms)" />

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <MudAlert Severity="Severity.Error" Class="my-4">@errorMessage</MudAlert>
                }

                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          ButtonType="ButtonType.Submit" 
                          Size="Size.Large" 
                          FullWidth="true" 
                          Class="mt-4 register-button"
                          Style="transition: all 0.2s ease-in-out; border-radius: 8px;"
                          Disabled="isLoading">
                    @if (isLoading)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Inscription en cours...</MudText>
                    }
                    else
                    {
                        <MudText>S'inscrire</MudText>
                    }
                </MudButton>
                
                <div class="d-flex justify-center mt-4">
                    <MudText>Vous avez déjà un compte ? <MudLink Href="/login" Color="Color.Primary">Se connecter</MudLink></MudText>
                </div>
                
                <MudDivider Class="my-6" />
                
                <MudText Align="Align.Center" Class="mb-4">Ou inscrivez-vous avec</MudText>
                
                <MudButton Variant="Variant.Outlined" 
                          StartIcon="@Icons.Custom.Brands.Google"
                          Color="Color.Error"
                          FullWidth="true"
                          OnClick="HandleGoogleSignIn">
                    Google
                </MudButton>
            </EditForm>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private RegisterRequest registerModel = new();
    private bool isLoading;
    private string errorMessage = string.Empty;
    
    private bool passwordVisible;
    private InputType passwordInputType = InputType.Password;
    private string passwordIcon = Icons.Material.Filled.VisibilityOff;
    
    private bool confirmPasswordVisible;
    private InputType confirmPasswordInputType = InputType.Password;
    private string confirmPasswordIcon = Icons.Material.Filled.VisibilityOff;
    
    private void TogglePasswordVisibility()
    {
        if (passwordVisible)
        {
            passwordVisible = false;
            passwordInputType = InputType.Password;
            passwordIcon = Icons.Material.Filled.VisibilityOff;
        }
        else
        {
            passwordVisible = true;
            passwordInputType = InputType.Text;
            passwordIcon = Icons.Material.Filled.Visibility;
        }
    }
    
    private void ToggleConfirmPasswordVisibility()
    {
        if (confirmPasswordVisible)
        {
            confirmPasswordVisible = false;
            confirmPasswordInputType = InputType.Password;
            confirmPasswordIcon = Icons.Material.Filled.VisibilityOff;
        }
        else
        {
            confirmPasswordVisible = true;
            confirmPasswordInputType = InputType.Text;
            confirmPasswordIcon = Icons.Material.Filled.Visibility;
        }
    }
    
    private async Task HandleRegister()
    {
        isLoading = true;
        errorMessage = string.Empty;
        
        try
        {
            var result = await AuthService.Register(registerModel);
            
            if (result.Success)
            {
                Snackbar.Add("Inscription réussie ! Vous pouvez maintenant vous connecter.", Severity.Success);
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void HandleGoogleSignIn()
    {
        isLoading = true;
        errorMessage = string.Empty;
        
        try
        {
            // Redirection vers l'authentification Google OAuth en utilisant le service centralisé
            var redirectUri = OAuthConfig.GetGoogleRedirectUri();
            
            // Afficher l'URI pour diagnostic
            Console.WriteLine($"Google OAuth redirectUri: {redirectUri}");
            var authorizationEndpoint = "https://accounts.google.com/o/oauth2/v2/auth";
            
            var queryParams = new Dictionary<string, string>
            {
                { "client_id", OAuthConfig.GetGoogleClientId() },
                { "redirect_uri", redirectUri },
                { "response_type", "code" },
                { "scope", "openid email profile" },
                { "access_type", "offline" },
                { "state", Guid.NewGuid().ToString() }
            };
            
            var queryString = string.Join("&", queryParams.Select(p => $"{Uri.EscapeDataString(p.Key)}={Uri.EscapeDataString(p.Value)}"));
            var authorizationRequest = $"{authorizationEndpoint}?{queryString}";
            
            NavigationManager.NavigateTo(authorizationRequest, true);
        }
        catch (Exception ex)
        {
            isLoading = false;
            errorMessage = $"Erreur: {ex.Message}";
        }
    }
}
