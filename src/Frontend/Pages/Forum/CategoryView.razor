@page "/forum/category/{CategoryId}"
@using Frontend.Services.Forum
@using Frontend.Models.Forum
@using System.Threading
@inject IForumService ForumService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Forum - @_category?.Name ?? "Catégorie"</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-6">
    @if (_loading)
    {
        <div class="d-flex justify-center my-8">
            <MudProgressCircular Indeterminate="true" Size="Size.Large" />
        </div>
    }
    else if (_category == null)
    {
        <MudAlert Severity="Severity.Error" Class="my-4">
            Catégorie non trouvée. Elle a peut-être été supprimée ou déplacée.
        </MudAlert>
        
        <MudButton Variant="Variant.Filled" 
                 Color="Color.Primary"
                 Href="/forum"
                 StartIcon="@Icons.Material.Filled.ArrowBack"
                 Class="mt-4">
            Retour au Forum
        </MudButton>
    }
    else
    {
        <div class="d-flex align-center mb-3">
            <MudBreadcrumbs Items="_breadcrumbs" />
        </div>
        
        <MudGrid>
            <MudItem xs="12">
                <MudPaper Elevation="3" Class="pa-4 mb-4">
                    <div class="d-flex justify-space-between align-center">
                        <div class="d-flex">
                            @if (!string.IsNullOrEmpty(_category.IconName))
                            {
                                <MudIcon Icon="@_category.IconName" Color="Color.Primary" Class="mr-3" Size="Size.Large" />
                            }
                            else
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Forum" Color="Color.Primary" Class="mr-3" Size="Size.Large" />
                            }
                            <div>
                                <MudText Typo="Typo.h5">@_category.Name</MudText>
                                <MudText Typo="Typo.body2">@_category.Description</MudText>
                            </div>
                        </div>
                        <div>
                            <MudButton StartIcon="@Icons.Material.Filled.Add" 
                                     Variant="Variant.Filled" 
                                     Color="Color.Primary"
                                     OnClick="@(() => CreateNewTopic())"
                                     Class="ml-2">
                                Nouveau sujet
                            </MudButton>
                        </div>
                    </div>
                </MudPaper>
                
                <MudPaper Elevation="2" Class="pa-2 mb-4">
                    <MudToolBar DisableGutters="true">
                        <MudSelect T="string" Label="Trier par" Value="_sortOrder" ValueChanged="HandleSortChange" Dense="true" Class="ml-2">
                            <MudSelectItem Value="@("newest")">Plus récents</MudSelectItem>
                            <MudSelectItem Value="@("oldest")">Plus anciens</MudSelectItem>
                            <MudSelectItem Value="@("most_replies")">Plus de réponses</MudSelectItem>
                            <MudSelectItem Value="@("most_views")">Plus de vues</MudSelectItem>
                            <MudSelectItem Value="@("last_activity")">Dernière activité</MudSelectItem>
                        </MudSelect>
                        <MudSpacer />
                        <MudPagination Count="_totalPages" SelectedChanged="HandlePageChange" Variant="Variant.Text" Color="Color.Primary" Size="Size.Small" />
                    </MudToolBar>
                </MudPaper>
                
                @if (!_topics.Any())
                {
                    <MudAlert Severity="Severity.Info" Class="my-4">
                        Aucun sujet dans cette catégorie. Soyez le premier à en créer un !
                    </MudAlert>
                }
                else
                {
                    <MudTable Items="_topics" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_refreshing" LoadingProgressColor="Color.Info">
                        <HeaderContent>
                            <MudTh Style="width: 60%">Sujet</MudTh>
                            <MudTh Style="width: 15%" Class="d-none d-md-table-cell">Auteur</MudTh>
                            <MudTh Style="width: 15%" Class="d-none d-sm-table-cell">Statistiques</MudTh>
                            <MudTh Style="width: 10%" Class="d-none d-md-table-cell">Dernière activité</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Sujet">
                                <div class="d-flex align-center">
                                    @if (context.IsPinned)
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.PushPin" Size="Size.Small" Color="Color.Primary" Class="mr-2" />
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Circle" Size="Size.Small" Class="mr-2" Color="@(context.IsRead ? Color.Default : Color.Secondary)" />
                                    }
                                    
                                    <div>
                                        <MudLink Href="@($"/forum/topics/{context.Id}")" Typo="Typo.body1">
                                            @context.Title
                                            @if (context.IsLocked)
                                            {
                                                <MudIcon Icon="@Icons.Material.Filled.Lock" Size="Size.Small" Class="ml-1" />
                                            }
                                        </MudLink>
                                        
                                        <div class="mt-1">
                                            @foreach (var tag in context.Tags.Take(3))
                                            {
                                                <MudChip T="string" Size="Size.Small" Label="true" Color="Color.Primary" Class="ma-1">@tag</MudChip>
                                            }
                                            
                                            @if (context.IsPinned)
                                            {
                                                <MudChip T="string" Size="Size.Small" Color="Color.Info" Class="mr-2">Épinglé</MudChip>
                                            }
                                            @if (context.IsLocked)
                                            {
                                                <MudChip T="string" Size="Size.Small" Color="Color.Error" Class="mr-2">Verrouillé</MudChip>
                                            }
                                            
                                            @if (context.Tags.Count > 3)
                                            {
                                                <MudChip T="string" Size="Size.Small" Label="true" Class="ma-1">+@(context.Tags.Count - 3)</MudChip>
                                            }
                                        </div>
                                        
                                        <MudText Typo="Typo.caption" Class="d-block d-md-none mt-1">
                                            Par @context.AuthorName • @context.PostCount réponses • @FormatTimeAgo(context.LastActivityAt)
                                        </MudText>
                                    </div>
                                </div>
                            </MudTd>
                            <MudTd DataLabel="Auteur" Class="d-none d-md-table-cell">
                                <div class="d-flex align-center">
                                    <MudAvatar Size="Size.Small" Class="mr-2" Color="Color.Secondary">
                                        @(context.AuthorName?.FirstOrDefault() ?? 'U')
                                    </MudAvatar>
                                    <MudLink Href="@($"/profile/{context.AuthorId}")">@context.AuthorName</MudLink>
                                </div>
                            </MudTd>
                            <MudTd DataLabel="Statistiques" Class="d-none d-sm-table-cell">
                                <div>
                                    <MudText Typo="Typo.body2">@context.PostCount réponses</MudText>
                                    <MudText Typo="Typo.caption">@context.ViewCount vues</MudText>
                                </div>
                            </MudTd>
                            <MudTd DataLabel="Dernière activité" Class="d-none d-md-table-cell">
                                <MudText Typo="Typo.body2">@FormatTimeAgo(context.LastActivityAt)</MudText>
                                @if (context.LastPostUserId != context.AuthorId)
                                {
                                    <MudText Typo="Typo.caption">par @context.LastPostUserName</MudText>
                                }
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                    
                    <div class="d-flex justify-center mt-4">
                        <MudPagination Count="_totalPages" SelectedChanged="HandlePageChange" Variant="Variant.Text" Color="Color.Primary" Size="Size.Medium" />
                    </div>
                }
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    [Parameter]
    public string CategoryId { get; set; } = string.Empty;
    
    private ForumCategoryViewModel? _category;
    private List<ForumTopicViewModel> _topics = new();
    private bool _loading = true;
    private bool _refreshing = false;
    private string _sortOrder = "newest";
    private int _currentPage = 1;
    private int _totalPages = 1;
    private List<BreadcrumbItem> _breadcrumbs = new();
    private CancellationTokenSource _cts = new();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadCategoryData();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(CategoryId))
        {
            _cts.Cancel();
            _cts = new CancellationTokenSource();
            await LoadCategoryData();
        }
    }
    
    private async Task LoadCategoryData()
    {
        try
        {
            _loading = true;
            _category = await ForumService.GetCategoryByIdAsync(CategoryId);
            
            if (_category != null)
            {
                _breadcrumbs = new List<BreadcrumbItem>
                {
                    new BreadcrumbItem("Forum", href: "/forum"),
                    new BreadcrumbItem(_category.Name, href: $"/forum/category/{CategoryId}", disabled: true)
                };
                
                await LoadTopics();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur de chargement de la catégorie: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }
    
    private async Task LoadTopics()
    {
        try
        {
            _refreshing = true;
            var pageSize = 20;
            var result = await ForumService.GetTopicsByCategoryAsync(CategoryId, _currentPage, pageSize, _sortOrder);
            _topics = result.Items;
            _totalPages = result.TotalPages;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur de chargement des sujets: {ex.Message}", Severity.Error);
        }
        finally
        {
            _refreshing = false;
        }
    }
    
    private async Task HandlePageChange(int page)
    {
        if (_currentPage != page)
        {
            _currentPage = page;
            await LoadTopics();
        }
    }
    
    private async Task HandleSortChange(string value)
    {
        if (_sortOrder != value)
        {
            _sortOrder = value;
            _currentPage = 1;
            await LoadTopics();
        }
    }
    
    private void CreateNewTopic()
    {
        NavigationManager.NavigateTo($"/forum/new-topic?category={CategoryId}");
    }
    
    private string FormatTimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.UtcNow - dateTime;

        if (timeSpan.TotalMinutes < 1)
            return "à l'instant";
        if (timeSpan.TotalMinutes < 60)
            return $"il y a {(int)timeSpan.TotalMinutes} min";
        if (timeSpan.TotalHours < 24)
            return $"il y a {(int)timeSpan.TotalHours} h";
        if (timeSpan.TotalDays < 7)
            return $"il y a {(int)timeSpan.TotalDays} j";
            
        return dateTime.ToString("dd/MM/yyyy");
    }
    
    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }
}
