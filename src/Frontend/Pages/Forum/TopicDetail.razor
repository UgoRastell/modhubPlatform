@page "/forums/topics/{TopicId}"
@using Frontend.Services.Forum
@using Frontend.Models.Forum
@using MudBlazor
@using MudBlazor.Extensions
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@inject IForumService ForumService
@inject ForumSignalRService SignalRService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IScrollListenerFactory ScrollListenerFactory
@inject AuthenticationStateProvider AuthStateProvider
@implements IAsyncDisposable

<PageTitle>@(topic?.Title ?? "Chargement...") - Forum - ModsGamingPlatform</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-6 mb-16">
    <MudBreadcrumbs Items="_breadcrumbs" Class="mb-4"></MudBreadcrumbs>
    
    @if (_loading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="mt-8 mx-auto d-block" />
    }
    else if (_notFound)
    {
        <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="mb-4">
            Le sujet demandé n'existe pas ou a été supprimé.
        </MudAlert>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo("/forums"))">
            Retour au forum
        </MudButton>
    }
    else
    {
        <MudPaper Class="pa-4 mb-4" Elevation="3" Style="background-color: #232634;">
            <div class="d-flex justify-space-between align-center mb-2">
                <MudText Typo="Typo.h4">@topic.Title</MudText>
                <MudChipSet T="string" ReadOnly="true">
                    @if (topic.IsPinned)
                    {
                        <MudChip T="string" Color="Color.Warning" Icon="@Icons.Material.Filled.PushPin" Size="Size.Small">Épinglé</MudChip>
                    }
                    @if (topic.IsLocked)
                    {
                        <MudChip T="string" Color="Color.Error" Icon="@Icons.Material.Filled.Lock" Size="Size.Small">Verrouillé</MudChip>
                    }
                </MudChipSet>
            </div>
            
            <MudText Typo="Typo.subtitle1" Color="Color.Primary" Class="mb-2">
                Catégorie : @topic.CategoryId
            </MudText>
            
            <MudText Typo="Typo.caption" Color="Color.Default" Class="mb-4">
                Créé par @topic.AuthorName le @topic.CreatedAt.ToLocalTime().ToString("dd/MM/yyyy à HH:mm") 
                · @topic.ViewsCount vues · @topic.RepliesCount réponses
            </MudText>
            
            <MudText Class="mb-4">@topic.Content</MudText>
            
            @if (topic.Tags.Any())
            {
                <MudText Typo="Typo.subtitle2" Class="mb-2">Tags</MudText>
                <MudChipSet T="string" ReadOnly="true" Class="mb-4">
                    @foreach (var tag in topic.Tags)
                    {
                        <MudChip T="string" Color="Color.Secondary" Size="Size.Small">@tag</MudChip>
                    }
                </MudChipSet>
            }
            
            <MudDivider Class="my-4" />
            
            <div class="d-flex justify-space-between align-center">
                <MudText Typo="Typo.subtitle2">@topic.RepliesCount réponses</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                       Disabled="@topic.IsLocked"
                       OnClick="@(() => NavigationManager.NavigateTo($"/forums/topics/{TopicId}/reply"))">
                    Répondre
                </MudButton>
            </div>
        </MudPaper>
        
        <!-- Posts / Réponses -->
        @if (_posts.Count == 0)
        {
            <MudText Typo="Typo.body1" Class="my-8 text-center">
                Aucune réponse pour le moment. Soyez le premier à répondre !
            </MudText>
        }
        else
        {
            <MudText Typo="Typo.h5" Class="mb-4">Réponses (@_posts.Count)</MudText>
            
            <!-- Container avec gestion du hover pour les messages -->
            <div @onmouseenter="@(() => _paperHovering = true)" 
                 @onmouseleave="@(() => HoverStop("paper"))">
                 
                @foreach (var post in _posts)
                {
                    <MudPaper Class="pa-3 mb-3 position-relative" 
                              Elevation="@(Hovering && _hoverPost?.Id == post.Id ? 4 : 2)" 
                              Style="@($"background-color: #232634; transition: all 0.2s ease-in-out; {(Hovering && _hoverPost?.Id == post.Id ? "transform: translateY(-2px);" : "")}")"
                              @onmouseenter="@((args) => HoverStart(args, post))"
                              @onmouseleave="@(() => HoverStop("bubble"))"
                              @onclick="@((args) => ClickMessage(args, post))"
                              @oncontextmenu="@((args) => RightClickMessage(args, post))">
                        
                        <div class="d-flex justify-space-between align-start mb-2">
                            <div class="d-flex align-center gap-3">
                                <!-- Avatar -->
                                <MudAvatar Color="Color.Primary" Size="Size.Medium">
                                    @post.AuthorName.Substring(0, Math.Min(2, post.AuthorName.Length)).ToUpper()
                                </MudAvatar>
                                <div>
                                    <MudText Typo="Typo.subtitle1" Class="font-weight-bold">@post.AuthorName</MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Default">
                                        @post.CreatedAt.ToLocalTime().ToString("dd/MM/yyyy à HH:mm")
                                        @if (post.IsEdited)
                                        {
                                             <MudChip T="string" Size="Size.Small" Color="Color.Info" Class="ml-2">Modifié</MudChip>
                                        }
                                    </MudText>
                                </div>
                            </div>
                            
                            <!-- Actions hover -->
                            @if (Hovering && _hoverPost?.Id == post.Id)
                            {
                                <div class="d-flex align-center gap-1 actionarea" style="opacity: 1;">
                                    <MudIconButton Icon="@Icons.Material.Filled.ThumbUp" 
                                                   Size="Size.Small"
                                                   Color="@(post.IsLikedByCurrentUser ? Color.Secondary : Color.Default)"
                                                   OnClick="@(() => MessageAction("liked"))"
                                                   Title="J'aime" />
                                    <span class="emoji">@post.LikesCount</span>
                                    
                                    <MudIconButton Icon="@Icons.Material.Filled.Reply" 
                                                   Size="Size.Small"
                                                   Color="Color.Primary"
                                                   OnClick="@(() => Reply())"
                                                   Title="Répondre" />
                                    
                                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" @ref="_contextMenu">
                                        <MudMenuItem OnClick="@(() => NavigationManager.NavigateTo($"/forums/posts/{post.Id}/edit"))">
                                            <div class="d-flex align-center gap-2">
                                                <MudIcon Icon="@Icons.Material.Filled.Edit" Size="Size.Small" />
                                                Modifier
                                            </div>
                                        </MudMenuItem>
                                        <MudMenuItem OnClick="@(() => DeletePost(post.Id))">
                                            <div class="d-flex align-center gap-2">
                                                <MudIcon Icon="@Icons.Material.Filled.Delete" Size="Size.Small" />
                                                Supprimer
                                            </div>
                                        </MudMenuItem>
                                    </MudMenu>
                                </div>
                            }
                        </div>
                        
                        <!-- Contenu du message -->
                        <div class="ml-12">
                            <MudText Class="mb-3">@post.Content</MudText>
                            
                            <!-- Statistiques du message -->
                            <div class="d-flex align-center gap-4 mt-2">
                                <div class="d-flex align-center gap-1">
                                    <MudIcon Icon="@Icons.Material.Filled.ThumbUp" Size="Size.Small" Color="Color.Default" />
                                    <MudText Typo="Typo.caption">@post.LikesCount</MudText>
                                </div>
                                @if (post.Replies.Any())
                                {
                                    <div class="d-flex align-center gap-1">
                                        <MudIcon Icon="@Icons.Material.Filled.Reply" Size="Size.Small" Color="Color.Default" />
                                        <MudText Typo="Typo.caption">@post.Replies.Count réponse(s)</MudText>
                                    </div>
                                }
                            </div>
                        </div>
                    </MudPaper>
                    
                    <!-- Réponses imbriquées -->
                    @if (post.Replies.Any())
                    {
                        <div class="ml-8 mb-4">
                            @foreach (var reply in post.Replies)
                            {
                                <MudPaper Class="pa-3 mb-3" Elevation="1" Style="background-color: #1e212b;">
                                    <div class="d-flex justify-space-between mb-2">
                                        <div>
                                            <MudText Typo="Typo.subtitle2">@reply.AuthorName</MudText>
                                            <MudText Typo="Typo.caption">
                                                @reply.CreatedAt.ToLocalTime().ToString("dd/MM/yyyy HH:mm")
                                            </MudText>
                                        </div>
                                        <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                                            <MudMenuItem OnClick="@(() => NavigationManager.NavigateTo($"/forums/posts/{reply.Id}/edit"))">
                                                Modifier
                                            </MudMenuItem>
                                            <MudMenuItem OnClick="@(() => DeletePost(reply.Id))">
                                                Supprimer
                                            </MudMenuItem>
                                        </MudMenu>
                                    </div>
                                    
                                    <MudText Typo="Typo.body2">@reply.Content</MudText>
                                </MudPaper>
                            }
                        </div>
                    }
                }
            </div>
        }
        
        @* Zone d'affichage des utilisateurs en train de taper *@
        @if (_typingUsers.Any())
        {
            <MudText Typo="Typo.caption" Color="Color.Primary" Class="mt-2">
                @if (_typingUsers.Count == 1)
                {
                    @($"{_typingUsers[0]} est en train d'écrire...")
                }
                else
                {
                    @($"{string.Join(", ", _typingUsers)} sont en train d'écrire...")
                }
            </MudText>
        }
        
        @* Zone de saisie des messages *@
        @if (!topic.IsLocked)
        {
            <MudPaper Elevation="2" Class="pa-3 mt-4">
                <MudTextField @bind-Value="_newMessage" 
                              Label="Votre message" 
                              Variant="Variant.Outlined"
                              Lines="3"
                              Immediate="true"
                              Placeholder="Écrivez votre message ici..."
                              Class="mb-2"
                              @onkeyup="OnMessageInputKeypress" />
                <div class="d-flex justify-end">
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary" 
                               OnClick="@SendMessageAsync"
                               Disabled="string.IsNullOrWhiteSpace(_newMessage) || !_isConnected">
                        Envoyer
                    </MudButton>
                </div>
            </MudPaper>
        }
    }
</MudContainer>

@code {
    [Parameter]
    public string TopicId { get; set; } = string.Empty;
    
    private bool _loading = true;
    private bool _notFound = false;
    private ForumTopicViewModel? topic;
    private List<ForumPostViewModel> _posts = new();
    
    // Variables pour ChatBubble interactions
    private IScrollListener? _scrollListener;
    private ForumPostViewModel? _selectedPost;
    private ForumPostViewModel? _hoverPost;
    private MudMenu? _contextMenu;
    private bool _bubbleHovering;
    private bool _paperHovering;
    
    private bool Hovering => _paperHovering || _bubbleHovering;
    
    // Variables pour SignalR
    private List<string> _typingUsers = new();
    private System.Timers.Timer _typingTimer = new(3000);
    private string _newMessage = string.Empty;
    private bool _isConnected = false;
    
    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Forum", href: "/forums")
    };
    
    protected override async Task OnInitializedAsync()
    {
        _scrollListener = ScrollListenerFactory.Create(null);
        _scrollListener.OnScroll += OnScrollAsync;
        await LoadData();
        
        // Configurer le timer pour réinitialiser l'état de frappe
        _typingTimer.AutoReset = false;
        _typingTimer.Elapsed += (sender, e) => {
            _typingUsers.Clear();
            InvokeAsync(StateHasChanged);
        };
        
        // Configurer les handlers d'événements SignalR
        SignalRService.OnMessageReceived += HandleMessageReceived;
        SignalRService.OnUserTyping += HandleUserTyping;
        SignalRService.OnUserOnline += HandleUserOnline;
        SignalRService.OnUserOffline += HandleUserOffline;
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (TopicId != null && _breadcrumbs.Count == 1)
        {
            await LoadData();
        }
    }
    
    private async Task LoadData()
    {
        try
        {
            _loading = true;
            
            // Charger les détails du topic
            topic = await ForumService.GetTopicByIdAsync(TopicId);
            
            if (topic == null)
            {
                _notFound = true;
                return;
            }
            
            // Mettre à jour les breadcrumbs
            if (_breadcrumbs.Count == 1)
            {
                _breadcrumbs.Add(new BreadcrumbItem(topic.CategoryId, href: $"/forums/categories/{topic.CategoryId}"));
                _breadcrumbs.Add(new BreadcrumbItem(topic.Title, href: $"/forums/topics/{topic.Id}", disabled: true));
            }
            
            // Charger les posts associés au topic
            _posts = await ForumService.GetPostsByTopicIdAsync(TopicId);
            
            // Se connecter au hub SignalR si ce n'est pas déjà fait
            if (!_isConnected)
            {
                await ConnectToSignalRHub();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur de chargement : {ex.Message}", Severity.Error);
            _notFound = true;
        }
        finally
        {
            _loading = false;
        }
    }
    
    // Méthodes d'interaction ChatBubble
    private void OnScrollAsync(object? sender, ScrollEventArgs e)
    {
        HoverStop("scroll");
    }
    
    private async Task ConnectToSignalRHub()
    {
        if (!string.IsNullOrEmpty(TopicId))
        {
            try
            {
                await SignalRService.StartConnectionAsync(TopicId);
                _isConnected = SignalRService.IsConnected;
                
                if (_isConnected)
                {
                    Snackbar.Add("Connecté au chat du forum", Severity.Success);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Erreur de connexion au chat: {ex.Message}", Severity.Error);
            }
        }
    }
    
    // Handlers d'événements SignalR
    private void HandleMessageReceived(ForumPost post)
    {
        // Créer un nouveau post avec le message reçu
        var newPost = new ForumPostViewModel
        {
            Id = post.Id,
            TopicId = post.TopicId,
            AuthorId = post.CreatedByUserId,
            AuthorName = post.CreatedByUsername,
            Content = post.Content,
            CreatedAt = post.CreatedAt,
            IsEdited = false,
            LikesCount = 0
        };
        
        // Ajouter temporairement le message à la liste locale
        _posts.Add(newPost);
        
        // Actualiser l'interface
        InvokeAsync(StateHasChanged);
        
        // Optionnellement, recharger la liste complète des posts depuis le serveur
        // pour obtenir les IDs corrects et autres métadonnées
        InvokeAsync(async () => await LoadData());
    }
    
    private void HandleUserTyping(string username)
    {
        if (!_typingUsers.Contains(username))
        {
            _typingUsers.Add(username);
            _typingTimer.Stop();
            _typingTimer.Start();
            InvokeAsync(StateHasChanged);
        }
    }
    
    private void HandleUserOnline(string connectionId)
    {
        // Gérer la connexion d'un utilisateur si nécessaire
        InvokeAsync(StateHasChanged);
    }
    
    private void HandleUserOffline(string connectionId)
    {
        // Gérer la déconnexion d'un utilisateur si nécessaire
        InvokeAsync(StateHasChanged);
    }
    
    private async Task SendMessageAsync()
    {
        if (!string.IsNullOrWhiteSpace(_newMessage) && _isConnected)
        {
            try
            {
                await SignalRService.SendMessageAsync(_newMessage);
                _newMessage = string.Empty;
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Erreur d'envoi: {ex.Message}", Severity.Error);
            }
        }
    }
    
    private async Task OnMessageInputKeypress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" && !args.ShiftKey)
        {
            await SendMessageAsync();
        }
        else
        {
            // Notifier que l'utilisateur est en train d'écrire
            await SignalRService.SendUserTypingAsync();
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_scrollListener != null)
        {
            _scrollListener.OnScroll -= OnScrollAsync;
            _scrollListener.Dispose();
        }
        
        // Nettoyer les gestionnaires d'événements SignalR
        if (SignalRService != null)
        {
            SignalRService.OnMessageReceived -= HandleMessageReceived;
            SignalRService.OnUserTyping -= HandleUserTyping;
            SignalRService.OnUserOnline -= HandleUserOnline;
            SignalRService.OnUserOffline -= HandleUserOffline;
            
            await SignalRService.DisposeAsync();
        }
        
        _typingTimer?.Dispose();
    }
    
    private void HoverStart(MouseEventArgs args, ForumPostViewModel post)
    {
        _bubbleHovering = true;
        _hoverPost = post;
    }
    
    private void HoverStop(string typeOfStop)
    {
        try
        {
            switch (typeOfStop)
            {
                case "paper":
                    _paperHovering = false;
                    break;
                case "bubble":
                    _bubbleHovering = false;
                    break;
                case "scroll":
                    _paperHovering = false;
                    _bubbleHovering = false;
                    StateHasChanged();
                    break;
                default:
                    break;
            }
        }
        catch { }
    }
    
    // Méthodes d'interaction ChatBubble
    private void ClickMessage(MouseEventArgs args, ForumPostViewModel post)
    {
        // Action par défaut au clic sur un message
        _hoverPost = post;
        StateHasChanged();
    }
    
    private void RightClickMessage(MouseEventArgs args, ForumPostViewModel post)
    {
        // Action au clic droit sur un message
        _hoverPost = post;
        // Le menu contextuel s'ouvrira automatiquement
        StateHasChanged();
    }
    
    private async Task MessageAction(string action)
    {
        if (_hoverPost == null) return;
        
        try
        {
            switch (action)
            {
                case "liked":
                    await LikePost(_hoverPost.Id);
                    Snackbar.Add("Message liké!", Severity.Success);
                    break;
                default:
                    break;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur lors de l'action: {ex.Message}", Severity.Error);
        }
    }
    
    private void Reply()
    {
        if (_hoverPost == null) return;
        NavigationManager.NavigateTo($"/forums/posts/{_hoverPost.Id}/reply");
    }
    
    private async Task LikePost(string postId)
    {
        try
        {
            await ForumService.LikePostAsync(postId, true);
            // Recharger les posts pour mettre à jour l'état des likes
            _posts = await ForumService.GetPostsByTopicIdAsync(TopicId);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur : {ex.Message}", Severity.Error);
        }
    }
    
    private async Task DeletePost(string postId)
    {
        try
        {
            bool success = await ForumService.DeletePostAsync(postId);
            if (success)
            {
                Snackbar.Add("Message supprimé avec succès", Severity.Success);
                // Recharger les posts après la suppression
                _posts = await ForumService.GetPostsByTopicIdAsync(TopicId);
            }
            else
            {
                Snackbar.Add("Impossible de supprimer le message", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erreur : {ex.Message}", Severity.Error);
        }
    }
}
