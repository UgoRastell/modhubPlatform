@using Frontend.Models
@using Frontend.Theme
@using MudBlazor

<MudDialog Class="mods-dialog neon-border">
    <DialogContent>
        <MudContainer>
            <MudGrid>
                <MudItem xs="12">
                    <MudCard Class="mods-card" Style="background-color: var(--bg-secondary); border-radius: 16px;">
                        <MudCardHeader Class="mods-card-header" Style="background-color: rgba(0, 170, 255, 0.05);">
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Détails de la transaction</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudChip T="string" Color="@GetStatusColor()" Size="Size.Small" Class="neon-chip">@Transaction.Status</MudChip>
                                <MudChip T="string" Color="@GetPriorityColor()" Size="Size.Small" Class="neon-chip">Priorité @Transaction.ReviewPriority</MudChip>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="6">
                                    <MudField Label="ID" Variant="Variant.Outlined">@Transaction.Id</MudField>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudField Label="ID Externe" Variant="Variant.Outlined">@Transaction.ExternalId</MudField>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudField Label="Date" Variant="Variant.Outlined">@Transaction.CreatedAt.ToLocalTime().ToString("g")</MudField>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudField Label="Montant" Variant="Variant.Outlined">@FormattedAmount</MudField>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudField Label="Utilisateur" Variant="Variant.Outlined">
                                        <div class="d-flex">
                                            <MudText>@Transaction.UserId</MudText>
                                        </div>
                                    </MudField>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudField Label="Description" Variant="Variant.Outlined">@Transaction.Status</MudField>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudField Label="Problème détecté" Variant="Variant.Outlined">@Transaction.ReviewReason</MudField>
                                </MudItem>
                                <!-- Journal d'événements retiré car pas disponible dans le modèle actuel -->
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Class="mods-button">Fermer</MudButton>
        <MudButton Color="Color.Warning" Variant="Variant.Filled" OnClick="InitiateRefund" Class="mods-button neon-glow">Rembourser</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    
    [Parameter] public ReviewTransaction Transaction { get; set; } = default!;
    
    private string FormattedAmount => Transaction.Amount.ToString("C", new System.Globalization.CultureInfo("fr-FR"));

    private void Cancel() => MudDialog.Cancel();

    private void InitiateRefund()
    {
        // Ferme ce dialogue et passer les détails de la transaction au dialogue de remboursement
        MudDialog.Close(DialogResult.Ok(Transaction));
    }

    private Color GetStatusColor()
    {
        return Transaction.Status.ToLower() switch
        {
            "failed" => Color.Error,
            "dispute" => Color.Error,
            "refunded" => Color.Warning,
            "pending" => Color.Info,
            _ => Color.Default
        };
    }

    private Color GetPriorityColor()
    {
        return Transaction.ReviewPriority switch
        {
            1 => Color.Info,
            2 => Color.Warning,
            3 => Color.Error,
            _ => Color.Default
        };
    }

    // Fonction retirée car EventLog n'est pas disponible dans le modèle actuel
}
