@page "/games"
@using Frontend.Models
@using Frontend.Services
@using Microsoft.AspNetCore.Authorization
@attribute [AllowAnonymous]
@inject NavigationManager NavigationManager
@inject IGameService GameService

<PageTitle>Jeux Supportés - ModHub</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Jeux Supportés</MudText>
    
    <MudPaper Class="pa-4 mb-4 rounded-xl" Elevation="3" Style="background-color: #232634;">
        <MudText Typo="Typo.body1">
            ModHub prend en charge de nombreux jeux populaires. Découvrez notre catalogue de jeux supportés et les mods disponibles pour chacun d'entre eux.
        </MudText>
    </MudPaper>

    <!-- Filtres et recherche -->
    <MudGrid Class="mb-4">
        <MudItem xs="12" md="8">
            <MudTextField @bind-Value="searchQuery" 
                       Label="Rechercher un jeu" 
                       Variant="Variant.Outlined"
                       Adornment="Adornment.End"
                       AdornmentIcon="@Icons.Material.Filled.Search"
                       OnAdornmentClick="SearchGames" />
        </MudItem>
        <MudItem xs="12" md="4">
            <MudSelect T="string" Label="Trier par" Variant="Variant.Outlined" Value="sortOption" ValueChanged="@((string val) => SortGames(val))">
                <MudSelectItem Value="@("popularity")">Popularité</MudSelectItem>
                <MudSelectItem Value="@("modCount")">Nombre de mods</MudSelectItem>
                <MudSelectItem Value="@("name")">Ordre alphabétique</MudSelectItem>
                <MudSelectItem Value="@("recent")">Ajouts récents</MudSelectItem>
            </MudSelect>
        </MudItem>
    </MudGrid>
    
    <!-- Liste des jeux -->
    <MudGrid>
        @foreach (var game in filteredGames)
        {
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudCard Elevation="3" Class="rounded-xl h-100 d-flex flex-column">
                    <MudCardMedia Image="@game.ImageUrl" Height="150" />
                    <MudCardContent Class="flex-grow-1">
                        <div class="d-flex justify-space-between align-center mb-2">
                            <MudText Typo="Typo.h6">@game.Name</MudText>
                            <MudChip T="string" Size="Size.Small" Color="Color.Primary">@game.ModCount mods</MudChip>
                        </div>
                        <MudText Typo="Typo.body2" Class="mud-text-secondary">@game.ShortDescription</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" 
                                 Color="Color.Primary" 
                                 FullWidth="true"
                                 EndIcon="@Icons.Material.Filled.ArrowForward"
                                 Href="@($"/catalog?game={game.Id}")">
                            Voir les mods
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    // Variables
    private string searchQuery = "";
    private string sortOption = "popularity";
    
    // Collection de jeux récupérés via API
    private IEnumerable<Game> games = new List<Game>();
    private IEnumerable<Game> filteredGames = new List<Game>();
    private bool isLoading = true;
    private string errorMessage;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadGamesAsync();
    }
    
    private async Task LoadGamesAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            games = await GameService.GetGamesAsync(searchQuery, sortOption);
            UpdateFilteredGames();
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors du chargement des jeux: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void UpdateFilteredGames()
    {
        filteredGames = games
            .Where(g => string.IsNullOrEmpty(searchQuery) || 
                      g.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                      g.ShortDescription.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }
    
    // Méthodes
    private async Task SearchGames()
    {
        await LoadGamesAsync();
    }
    
    private async Task SortGames(string option)
    {
        sortOption = option;
        await LoadGamesAsync();
    }
}
