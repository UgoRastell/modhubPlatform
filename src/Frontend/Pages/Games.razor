@page "/games"
@using Frontend.Models
@using Frontend.Services
@using Microsoft.AspNetCore.Authorization
@attribute [AllowAnonymous]
@inject NavigationManager NavigationManager
@inject IModService ModService

<PageTitle>Catalogue de Mods - ModHub</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Catalogue de Mods</MudText>
    
    <MudPaper Class="pa-4 mb-4 rounded-xl" Elevation="3" Style="background-color: #232634;">
        <MudText Typo="Typo.body1">
            Découvrez notre collection complète de mods pour vos jeux favoris. Tous les mods sont testés et approuvés par notre équipe de modération.
        </MudText>
    </MudPaper>

    <!-- Filtres et recherche -->
    <MudGrid Class="mb-4">
        <MudItem xs="12" md="6">
            <MudTextField @bind-Value="searchQuery" 
                       Label="Rechercher un mod" 
                       Variant="Variant.Outlined"
                       Adornment="Adornment.End"
                       AdornmentIcon="@Icons.Material.Filled.Search"
                       OnAdornmentClick="SearchMods" />
        </MudItem>
        <MudItem xs="12" md="3">
            <MudSelect T="string" Label="Jeu" Variant="Variant.Outlined" Value="gameFilter" ValueChanged="@((string val) => FilterByGame(val))">
                <MudSelectItem Value="@("")">Tous les jeux</MudSelectItem>
                <MudSelectItem Value="@("minecraft")">Minecraft</MudSelectItem>
                <MudSelectItem Value="@("skyrim")">Skyrim</MudSelectItem>
                <MudSelectItem Value="@("fallout4")">Fallout 4</MudSelectItem>
                <MudSelectItem Value="@("witcher3")">The Witcher 3</MudSelectItem>
            </MudSelect>
        </MudItem>
        <MudItem xs="12" md="3">
            <MudSelect T="string" Label="Trier par" Variant="Variant.Outlined" Value="sortOption" ValueChanged="@((string val) => SortMods(val))">
                <MudSelectItem Value="@("recent")">Plus récents</MudSelectItem>
                <MudSelectItem Value="@("popular")">Popularité</MudSelectItem>
                <MudSelectItem Value="@("downloads")">Téléchargements</MudSelectItem>
                <MudSelectItem Value="@("rating")">Note</MudSelectItem>
                <MudSelectItem Value="@("name")">Nom A-Z</MudSelectItem>
            </MudSelect>
        </MudItem>
    </MudGrid>
    
    <!-- Indicateur de chargement -->
    @if (isLoading)
    {
        <div class="d-flex justify-center mt-8">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            <MudText Class="ml-4">Chargement des mods...</MudText>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" Class="mb-4">
            @errorMessage
        </MudAlert>
    }
    else
    {
        <!-- Statistiques -->
        <MudPaper Class="pa-4 mb-4" Elevation="2">
            <MudText Typo="Typo.body1">
                <strong>@filteredMods.Count()</strong> mods trouvés
                @if (!string.IsNullOrEmpty(searchQuery))
                {
                    <span> pour "@searchQuery"</span>
                }
            </MudText>
        </MudPaper>

        <!-- Liste des mods -->
        <MudGrid>
            @foreach (var mod in filteredMods)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Elevation="3" Class="rounded-xl h-100 d-flex flex-column">
                        @if (!string.IsNullOrEmpty(mod.ThumbnailUrl))
                        {
                            <MudCardMedia Image="@mod.ThumbnailUrl" Height="200" />
                        }
                        else
                        {
                            <div style="height: 200px; background: linear-gradient(45deg, #232634, #2a2f48); display: flex; align-items: center; justify-content: center;">
                                <MudIcon Icon="@Icons.Material.Filled.Extension" Size="Size.Large" Style="color: #666;" />
                            </div>
                        }
                        <MudCardContent Class="flex-grow-1">
                            <div class="d-flex justify-space-between align-center mb-2">
                                <MudText Typo="Typo.h6" Style="font-weight: 600;">@mod.Name</MudText>
                                @if (mod.IsFeatured)
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Warning" Icon="@Icons.Material.Filled.Star">Vedette</MudChip>
                                }
                            </div>
                            <MudText Typo="Typo.body2" Class="mud-text-secondary mb-2">@mod.ShortDescription</MudText>
                            
                            <div class="d-flex align-center gap-2 mb-2">
                                <MudChip T="string" Size="Size.Small" Color="Color.Info">@mod.GameName</MudChip>
                                @if (mod.IsApproved)
                                {
                                    <MudChip T="string" Size="Size.Small" Color="Color.Success">Approuvé</MudChip>
                                }
                            </div>
                            
                            <div class="d-flex justify-space-between align-center">
                                <div class="d-flex align-center">
                                    @if (mod.AverageRating > 0)
                                    {
                                        <MudRating SelectedValue="(int)Math.Round(mod.AverageRating)" ReadOnly="true" Size="Size.Small" />
                                        <MudText Typo="Typo.caption" Class="ml-1">(@mod.RatingCount)</MudText>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.caption">Pas de note</MudText>
                                    }
                                </div>
                                <MudText Typo="Typo.caption" Color="Color.Primary">@mod.DownloadCount.ToString("N0") téléchargements</MudText>
                            </div>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Filled" 
                                     Color="Color.Primary" 
                                     FullWidth="true"
                                     EndIcon="@Icons.Material.Filled.Download"
                                     Href="@($"/mod/{mod.Slug}")">
                                Voir le mod
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>

        @if (!filteredMods.Any())
        {
            <div class="d-flex flex-column align-center mt-8 pa-8">
                <MudIcon Icon="@Icons.Material.Filled.SearchOff" Size="Size.Large" Class="mb-4" Style="color: #666;" />
                <MudText Typo="Typo.h6" Class="mb-2">Aucun mod trouvé</MudText>
                <MudText Typo="Typo.body1" Class="mud-text-secondary">
                    Essayez de modifier vos critères de recherche ou vos filtres.
                </MudText>
            </div>
        }
    }
</MudContainer>

@code {
    // Variables
    private string searchQuery = "";
    private string sortOption = "recent";
    private string gameFilter = "";
    
    // Collection de mods récupérés via API
    private IEnumerable<ModDto> mods = new List<ModDto>();
    private IEnumerable<ModDto> filteredMods = new List<ModDto>();
    private bool isLoading = true;
    private string errorMessage;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadModsAsync();
    }
    
    // Variables pour pagination
    private int currentPage = 1;
    private int pageSize = 50;
    private int totalItems = 0;
    private int totalPages = 0;
    
    private async Task LoadModsAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            
            // Récupérer les mods avec pagination
            var response = await ModService.GetModsAsync(
                page: currentPage, 
                pageSize: pageSize, 
                searchTerm: searchQuery, 
                category: "", 
                sortBy: sortOption);
                
            if (response.Success && response.Data != null)
            {
                mods = response.Data.Items.Where(m => m.IsApproved).ToList();
                totalItems = response.Data.TotalCount;
                totalPages = response.Data.TotalPages;
                UpdateFilteredMods();
            }
            else
            {
                errorMessage = response.Message ?? "Erreur lors du chargement des mods";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors du chargement des mods: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void UpdateFilteredMods()
    {
        var query = mods.AsEnumerable();
        
        // Filtrage par recherche
        if (!string.IsNullOrEmpty(searchQuery))
        {
            query = query.Where(m => 
                m.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                m.ShortDescription.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                m.Tags.Any(t => t.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)));
        }
        
        // Filtrage par jeu
        if (!string.IsNullOrEmpty(gameFilter))
        {
            query = query.Where(m => m.GameId.Equals(gameFilter, StringComparison.OrdinalIgnoreCase));
        }
        
        // Tri
        query = sortOption switch
        {
            "popular" => query.OrderByDescending(m => m.AverageRating).ThenByDescending(m => m.RatingCount),
            "downloads" => query.OrderByDescending(m => m.DownloadCount),
            "rating" => query.OrderByDescending(m => m.AverageRating),
            "name" => query.OrderBy(m => m.Name),
            "recent" => query.OrderByDescending(m => m.CreatedAt),
            _ => query.OrderByDescending(m => m.CreatedAt)
        };
        
        filteredMods = query.ToList();
    }
    
    // Méthodes
    private async Task SearchMods()
    {
        UpdateFilteredMods();
        StateHasChanged();
    }
    
    private async Task SortMods(string option)
    {
        sortOption = option;
        UpdateFilteredMods();
        StateHasChanged();
    }
    
    private async Task FilterByGame(string game)
    {
        gameFilter = game;
        UpdateFilteredMods();
        StateHasChanged();
    }
}
