version: '3.8'

services:
  mongodb:
    image: mongo:latest
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - modhub_network

  redis:
    image: redis:alpine
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - modhub_network

  usersservice:
    build:
      context: ./src/Services/Users
      dockerfile: Dockerfile
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - MongoDbSettings__ConnectionString=mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@mongodb:27017/${MONGO_DATABASE}?authSource=admin&authMechanism=SCRAM-SHA-256
      - JWT__Secret=${JWT_SECRET}
      - JWT__ExpiryMinutes=60
      - JWT__Issuer=ModsGamingPlatform
      - JWT__Audience=ModsGamingPlatformUsers
      - REDIS__ConnectionString=redis:6379
    ports:
      - "8080:8080"
    depends_on:
      - mongodb
      - redis
    networks:
      - modhub_network

  modsservice:
    build:
      context: ./src/Services/Mods
      dockerfile: Dockerfile
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__MongoDb=mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@mongodb:27017
    depends_on:
      - mongodb
    volumes:
      - mod_files:/app/mod-files
    networks:
      - modhub_network

  paymentsservice:
    build:
      context: ./src/Services/Payments
      dockerfile: Dockerfile
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__MongoDb=mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@mongodb:27017
    depends_on:
      - mongodb
    networks:
      - modhub_network

  communityservice:
    build:
      context: ./src/CommunityService
      dockerfile: Dockerfile
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__MongoDb=mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@mongodb:27017
      - REDIS__ConnectionString=redis:6379
    depends_on:
      - mongodb
      - redis
    networks:
      - modhub_network

  gateway:
    build:
      context: ./src/Gateway
      dockerfile: Dockerfile
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - Services__UsersService=http://usersservice:8080
      - Services__ModsService=http://modsservice:8080
      - Services__PaymentsService=http://paymentsservice:8080
      - Services__CommunityService=http://communityservice:8080
      - JWT__Secret=${JWT_SECRET}
    depends_on:
      - usersservice
      - modsservice
      - paymentsservice
      - communityservice
    networks:
      - modhub_network

  frontend:
    build:
      context: ./src
      dockerfile: Frontend/Dockerfile
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - BackendUrl=https://${DOMAIN_NAME}/api
    depends_on:
      - gateway
    networks:
      - modhub_network

  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./docker/letsencrypt/live/modhub.fr:/etc/nginx/ssl:ro
      - ./docker/letsencrypt/www:/var/www/certbot:rw
    depends_on:
      - frontend
      - gateway
    networks:
      - modhub_network

 

volumes:
  mongodb_data:
  redis_data:
  mod_files:

networks:
  modhub_network:
    driver: bridge
